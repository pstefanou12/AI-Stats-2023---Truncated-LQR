{"cells":[{"cell_type":"markdown","metadata":{"id":"oXpxFPlMirr0"},"source":["# Truncated Linear Dynamical Systems"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":40151,"status":"ok","timestamp":1666300256871,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"4cqcUgjzirr2","outputId":"e734911a-81d0-416f-a1a8-3b82545a90c5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting cox\n","  Downloading cox-0.1.post3-py3-none-any.whl (18 kB)\n","Collecting py3nvml\n","  Downloading py3nvml-0.2.7-py3-none-any.whl (55 kB)\n","\u001b[K     |████████████████████████████████| 55 kB 1.4 MB/s \n","\u001b[?25hRequirement already satisfied: psutil in /usr/local/lib/python3.7/dist-packages (from cox) (5.4.8)\n","Requirement already satisfied: grpcio in /usr/local/lib/python3.7/dist-packages (from cox) (1.49.1)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from cox) (4.64.1)\n","Collecting gitpython\n","  Downloading GitPython-3.1.29-py3-none-any.whl (182 kB)\n","\u001b[K     |████████████████████████████████| 182 kB 36.8 MB/s \n","\u001b[?25hCollecting gitdb<5,>=4.0.1\n","  Downloading gitdb-4.0.9-py3-none-any.whl (63 kB)\n","\u001b[K     |████████████████████████████████| 63 kB 933 kB/s \n","\u001b[?25hRequirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.7/dist-packages (from gitpython->cox) (4.1.1)\n","Collecting smmap<6,>=3.0.1\n","  Downloading smmap-5.0.0-py3-none-any.whl (24 kB)\n","Requirement already satisfied: six>=1.5.2 in /usr/local/lib/python3.7/dist-packages (from grpcio->cox) (1.15.0)\n","Collecting xmltodict\n","  Downloading xmltodict-0.13.0-py2.py3-none-any.whl (10.0 kB)\n","Installing collected packages: smmap, xmltodict, gitdb, py3nvml, gitpython, cox\n","Successfully installed cox-0.1.post3 gitdb-4.0.9 gitpython-3.1.29 py3nvml-0.2.7 smmap-5.0.0 xmltodict-0.13.0\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting tensorboardX\n","  Downloading tensorboardX-2.5.1-py2.py3-none-any.whl (125 kB)\n","\u001b[K     |████████████████████████████████| 125 kB 5.1 MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from tensorboardX) (1.21.6)\n","Requirement already satisfied: protobuf<=3.20.1,>=3.8.0 in /usr/local/lib/python3.7/dist-packages (from tensorboardX) (3.17.3)\n","Requirement already satisfied: six>=1.9 in /usr/local/lib/python3.7/dist-packages (from protobuf<=3.20.1,>=3.8.0->tensorboardX) (1.15.0)\n","Installing collected packages: tensorboardX\n","Successfully installed tensorboardX-2.5.1\n","Mounted at /content/drive\n"]},{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7fc8c40e3c10>"]},"metadata":{},"execution_count":1}],"source":["#@title Run this to setup dependencies and mount drive\n","!pip3 install cox\n","!pip install tensorboardX\n","\n","# # mount google drive locally onto colab\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import matplotlib\n","import matplotlib.pyplot as plt\n","from matplotlib.pyplot import figure\n","import seaborn as sns\n","\n","font = {'weight' : 'normal',\n","        'size'   : 20}\n","matplotlib.rc('font', **font)\n","\n","import subprocess \n","import torch as ch\n","from torch import Tensor\n","import torch.linalg as LA\n","\n","from torch.distributions import Uniform\n","from torch.distributions.multivariate_normal import MultivariateNormal\n","import pandas as pd\n","import numpy as np\n","import csv\n","import json\n","import cox\n","from cox.store import Store\n","from cox.readers import CollectionReader\n","import os\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score, mean_absolute_error\n","\n","import datetime\n","import seaborn as sns\n","import datetime\n","import math \n","import IPython \n","\n","import os \n","os.chdir('/content/drive/MyDrive/Truncated LQR')\n","from helpers import Parameters\n","import oracle\n","# commands and arguments\n","\n","\n","# mean squared error loss\n","mse_loss = ch.nn.MSELoss(reduction='mean')\n","\n","# set manual seed for notebook\n","ch.manual_seed(69)"]},{"cell_type":"code","source":["!ls /content/drive/MyDrive"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mHIgZR57M-j9","executionInfo":{"status":"ok","timestamp":1666300322355,"user_tz":420,"elapsed":365,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"}},"outputId":"6a5721ab-65e2-4c75-d16e-b8bf9b33e431"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":[" 14.73\n"," 15.481\n","'15.481 Project 2.gdoc'\n"," 6.172\n"," 6.804\n","'6.804 Project'\n"," 6.864\n","'6.997 Professional Prospective.pdf'\n","'867 project'\n","'Adversarial Attacks'\n"," app.py\n","'ARS TT&T'\n"," bert-extractive-summarization\n"," Bicycle\n"," CensoredNormalDistributions\n","'Colab Notebooks'\n"," colab_notebooks_and_data\n","'college_database_final - Sheet1.csv'\n"," college_db.csv\n","'Copy of NLP for Finance - Weekday 2  Afternoon.gslides'\n"," Crypto\n"," delphi.ai\n","'Efficient Truncated Regression with Unknown Noise Variance - NeurIPS 2021.gslides'\n","'H20 Tech.gdoc'\n","'Learning Truncation Sets'\n"," MEng\n"," Misc\n"," Notability\n","'Notability (1)'\n","'Patroklos_CV (1).pdf'\n","'Patroklos_CV (2).pdf'\n","'Patroklos_CV (3).pdf'\n"," Patroklos_CV.pdf\n"," repos\n"," Results\n"," Resultsresult.csv\n"," Resultstmp.csv\n","'SCM256 Spring 2022'\n","'Seattle Housing.gdoc'\n"," Students_ANN.ipynb\n"," submissions.zip\n"," Teaching\n","'Technology Theta Tau'\n","'Thesis Notebooks'\n"," Training\n","'Truncated Computer Vision'\n","'Truncated LQR'\n"," Truncated-Regression-With-Unknown-Noise-Variance-Neurips2021\n"," Trunc_Bio\n"]}]},{"cell_type":"markdown","metadata":{"id":"7HSz0lwmBEyu"},"source":["# Create a synthetic dataset"]},{"cell_type":"code","source":["# spectral norm is the largest singular value --> SVD\n","def calc_spectral_norm(A):\n","  u, s, v = LA.svd(A)\n","  return s.max()"],"metadata":{"id":"-ZfHSDQWleZg"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1666280994460,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"WjFke9F7BD2m","outputId":"dd7c3784-e2be-450e-a604-77b9f5dad66e"},"outputs":[{"output_type":"stream","name":"stdout","text":["A: \n"," tensor([[-0.5300, -1.3035,  0.4438,  1.2221,  1.0395,  0.9608,  0.4214,  0.7452,\n","         -1.8389, -1.2497],\n","        [-0.2485,  0.1428, -1.0509,  0.3527, -0.0916,  0.0341, -0.8986,  0.1022,\n","         -0.6627, -0.1350],\n","        [-0.3983, -1.7892,  1.2785,  1.3351, -0.3066,  1.0382,  1.2762,  0.0419,\n","         -1.2794, -1.8432],\n","        [ 0.8633, -1.7786, -0.8080, -0.8735,  0.9367, -1.2319,  1.5287, -0.2759,\n","         -0.8625, -0.1915],\n","        [-0.4807, -1.4154,  0.0934, -0.2420, -1.0300, -0.2034, -0.6882, -0.0178,\n","          1.1983, -0.8180],\n","        [-0.7297,  0.8256,  0.8756,  0.2960,  0.6394,  1.2406, -1.2100, -0.9481,\n","          0.6444,  0.2188],\n","        [-1.2224, -0.9322, -0.3832,  1.4027,  0.4913,  1.0152, -0.0184, -0.8487,\n","          1.8939, -0.0325],\n","        [ 0.3191, -0.5700, -0.4292, -1.0216, -0.5285,  1.6272, -0.2411, -2.1021,\n","         -0.0179,  0.2241],\n","        [ 0.4389,  1.6109, -0.7284, -1.6016,  0.7329, -0.7448,  2.2900,  0.1214,\n","          0.4600,  0.1848],\n","        [ 0.4180,  0.6184,  0.5975,  0.5968, -0.5111, -0.2617, -1.3285,  0.6058,\n","          1.5191,  0.4225]])\n","A shape is: torch.Size([10, 10])\n","Spectral Norm: 5.382068634033203\n"]}],"source":["D = 10 # number of dimensions for A_{*} matrix\n","T = 10000\n","# A = ch.rand(ch.Size([D, 1])) * ch.eye(D)\n","A = ch.randn((D, D))\n","print(f'A: \\n {A}')\n","print('A shape is: {}'.format(A.size()))\n","\n","spectral_norm = calc_spectral_norm(A)\n","print(f'Spectral Norm: {spectral_norm}')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SAg-lOckf8ok"},"outputs":[],"source":["phi = oracle.LogitBall(7)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3580,"status":"ok","timestamp":1666280998033,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"z9a6c4BDHOuB","outputId":"e64c2b58-a376-43c4-cd8c-41d38efbd279"},"outputs":[{"output_type":"stream","name":"stdout","text":["total samples: 18337\n","X size: torch.Size([10000, 10])\n","Y size: torch.Size([10000, 10])\n","alpha: 0.5453454763592736\n"]}],"source":["X, Y = ch.Tensor([]), ch.Tensor([])\n","\n","M = ch.distributions.MultivariateNormal(ch.zeros(D), ch.eye(D))\n","\n","x_t = ch.zeros((1, D))\n","total_samples = 0\n","while X.size(0) < T: \n","  noise = M.sample([x_t.size(0)])\n","  y_t = (A@x_t.T).T + noise\n","  if phi(y_t): # returns a boolean \n","    X = ch.cat([X, x_t])\n","    Y = ch.cat([Y, y_t])\n","    x_t = y_t\n","  else: \n","    # x_t = ch.rand(ch.Size([1, D]))\n","    x_t = ch.zeros((1, D))\n","\n","  total_samples += 1\n","\n","alpha = T / total_samples\n","print(f'total samples: {total_samples}')\n","print('X size: {}'.format(X.size()))\n","print('Y size: {}'.format(Y.size()))\n","print(f'alpha: {alpha}')"]},{"cell_type":"markdown","metadata":{"id":"OhVvZp5WU4cW"},"source":["# Linear Dynamical System Implementation \n","(Plevrakis '21)\n","Here we provide an implementation of Plevrakis's algorithm from 2021 for learning for censored and dependent data.\n","\n","https://arxiv.org/pdf/2104.05087.pdf"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Gi3XxNgGL5xK"},"outputs":[],"source":["#@title Scaffolding Code\n","\n","\n","\"\"\"\n","Truncated Linear Dynamic System.\n","\"\"\"\n","\n","\n","TRUNC_LDS_DEFAULTS = {\n","        'phi': (Callable, REQ),\n","        'c_gamma': (float, REQ),\n","        'noise_var': (float, 1.0), \n","        'fit_intercept': (bool, True), \n","        'val': (float, .2),\n","        'var_lr': (float, 1e-2), \n","        'l1': (float, 0.0), \n","        'eps': (float, 1e-5),\n","        'r': (float, 1.0), \n","        'rate': (float, 1.5), \n","        'batch_size': (int, 1),\n","        'workers': (int, 0),\n","        'num_samples': (int, 50),\n","        'T': (int, 1000),\n","        'noise_var': (ch.Tensor, ch.Tensor([1.0])),\n","}\n","\n","def Test(mu, phi, c_gamma, alpha, T): \n","  \"\"\"\n","  Test function that checks which gradient to take \n","  at timestep t. \n","  Args: \n","    :param mu: current conditional mean for LDS \n","    :param phi: oracle \n","    :param c_gamma: constant \n","    :param alpha: survival probability\n","    :param T: number of timesteps in dataset\n","  \"\"\"\n","  M = ch.distributions.MultivariateNormal(ch.zeros(mu[0].size(0)), ch.eye(mu[0].size(0)))\n","\n","  # threshold constant\n","  gamma = (alpha / 2) ** c_gamma\n","\n","  # number of samples\n","  k = int((4 / gamma) * math.log(T))\n","  stacked = mu.repeat(k, 1, 1)\n","  noise = M.sample(stacked.size()[:-1])\n","  ci = stacked + noise\n","  p = phi(ci).float().mean(0).flatten()\n","  \"\"\"\n","  check whether the probability that a sample falls within the \n","  truncation set is greater than the survival probability\n","  \"\"\"\n","  return p >= (2 * gamma)\n","\n","\n","class SwitchGrad(ch.autograd.Function):\n","    \"\"\"\n","    Computes the gradient of the negative population log likelihood for truncated regression\n","    with known noise variance.\n","    \"\"\"\n","    @staticmethod\n","    def forward(ctx, pred, targ, phi, c_gamma, alpha, T, noise_var, num_samples=10, eps=1e-5):\n","        \"\"\"\n","        Args: \n","            pred (torch.Tensor): size (batch_size, d) matrix for regression model predictions\n","            targ (torch.Tensor): size (batch_size, d) matrix for regression target predictions\n","            phi (oracle.oracle): dependent variable membership oracle\n","            c_gamma (float) : large constant >= 0\n","            alpha (float) : survival probability\n","            T (int) : number of samples within dataset \n","            noise_var (float): noise distribution variance parameter\n","            num_samples (int): number of samples to generate per sample in batch in rejection sampling procedure\n","            eps (float): denominator error constant to avoid divide by zero errors\n","        \"\"\"\n","        z = pred.clone()\n","        # make num_samples copies of pred, N x B x 1\n","        stacked = pred[None, ...].repeat(num_samples, 1, 1)\n","\n","        '''\n","        test whether to use censor-aware or censor-oblivious function \n","        for computing gradient\n","        '''\n","        M = ch.distributions.MultivariateNormal(ch.zeros(pred[0].size(0)), ch.eye(pred[0].size(0)))\n","\n","        result = Test(pred, phi, c_gamma, alpha, T)[...,None]\n","        # take inverse of result; result = [0, 1], result_inv = [1, 0]\n","        result_inv = ~result\n","\n","        # add random noise to each copy\n","        # noised = stacked + math.sqrt(noise_var) * ch.randn(stacked.size())\n","        noised = stacked + M.sample(stacked.size()[:-1])\n","        \n","        # filter out copies where pred is in bounds\n","        filtered = phi(noised)\n","        # average across truncated indices\n","        z_ = (filtered * noised).sum(dim=0) / (filtered.sum(dim=0) + eps)\n","\n","        \"\"\"\n","        result and result_inv are masks, so that you keep the noised \n","        and the unnoised samples\n","        \"\"\"\n","        z = result.float()*z_ + result_inv.float()*z\n","\n","        ctx.save_for_backward(pred, targ, z)\n","        loss = (-.5 * (targ - pred).norm(p=2, keepdim=True, dim=-1).pow(2) + \\\n","                .5 * (z - pred).norm(p=2, keepdim=True, dim=-1).pow(2))\n","        loss_avg = loss.mean(0)\n","\n","        if ch.isnan(loss_avg): \n","          print(f'pred: {pred}')\n","          import pdb; pdb.set_trace()\n","\n","        return loss.mean(0)\n","\n","    @staticmethod\n","    def backward(ctx, grad_output):\n","        pred, targ, z = ctx.saved_tensors\n","        return (z - targ) / pred.size(0), targ / pred.size(0), None, \\\n","        None, None, None, None, None, None, None\n","\n","\n","def make_train_and_val(args, X, y): \n","    # check arguments are correct\n","    args = check_and_fill_args(args, DATASET_DEFAULTS)\n","    # separate into training and validation set\n","    val = int(args.val * X.size(0))\n","    X_train,y_train = X[val:], y[val:]\n","    X_val, y_val = X[:val], y[:val]\n","\n","    train_ds = TensorDataset(X_train, y_train)\n","    val_ds = TensorDataset(X_val, y_val)\n","    train_loader = DataLoader(train_ds, batch_size=args.batch_size, num_workers=args.workers)\n","    val_loader = DataLoader(val_ds, batch_size=args.batch_size, num_workers=args.workers)\n","\n","    return train_loader, val_loader\n","\n","\n","class TruncatedLDS:\n","    \"\"\"\n","    Truncated linear regression class. Supports truncated linear regression\n","    with known noise, unknown noise, and confidence intervals. Module uses \n","    delphi.trainer.Trainer to train truncated linear regression by performing \n","    projected stochastic gradient descent on the truncated population log likelihood. \n","    Module requires the user to specify an oracle from the delphi.oracle.oracle class, \n","    and the survival probability. \n","    \"\"\"\n","    def __init__(self,\n","                args: Parameters, \n","                store: cox.store.Store=None):\n","        \"\"\"\n","        Args: \n","            phi (delphi.oracle.oracle) : oracle object for truncated regression model \n","            alpha (float) : survival probability for truncated regression model\n","            c_gamma (float) : large constant \n","            fit_intercept (bool) : boolean indicating whether to fit a intercept or not \n","            val (int) : number of samples to use for validation set \n","            tol (float) : gradient tolerance threshold \n","            workers (int) : number of workers to spawn \n","            r (float) : size for projection set radius \n","            rate (float): rate at which to increase the size of the projection set, when procedure does not converge - input as a decimal percentage\n","            num_samples (int) : number of samples to sample in gradient \n","            batch_size (int) : batch size\n","            lr (float) : initial learning rate for regression weight parameters \n","            var_lr (float) : initial learning rate to use for variance parameter in the settign where the variance is unknown \n","            step_lr (int) : number of gradient steps to take before decaying learning rate for step learning rate \n","            custom_lr_multiplier (str) : \"cosine\" (cosine annealing), \"adam\" (adam optimizer) - different learning rate schedulers available\n","            lr_interpolation (str) : \"linear\" linear interpolation\n","            step_lr_gamma (float) : amount to decay learning rate when running step learning rate\n","            momentum (float) : momentum for SGD optimizer \n","            eps (float) :  epsilon value for gradient to prevent zero in denominator\n","            store (cox.store.Store) : cox store object for logging \n","        \"\"\"\n","        super().__init__()\n","        # instance variables\n","        assert isinstance(args, Parameters), \"args is type: {}. expecting args to be type delphi.utils.helpers.Parameters\"\n","        assert store is None or isinstance(store, cox.store.Store), \"store is type: {}. expecting cox.store.Store.\".format(type(store))\n","        self.store = store \n","        self.trunc_lds = None\n","        # algorithm hyperparameters\n","        TRUNC_LDS_DEFAULTS.update(TRAINER_DEFAULTS)\n","        TRUNC_LDS_DEFAULTS.update(DEFAULTS)\n","        self.args = check_and_fill_args(args, TRUNC_LDS_DEFAULTS)\n","\n","        # property instance variables \n","        self.A_0 = None\n","        self.A = None\n","        self.Sigma = None\n","\n","    def fit(self, \n","            X: ch.Tensor, \n","            y: ch.Tensor):\n","        \"\"\"\n","        Train truncated linear regression model by running PSGD on the truncated negative \n","        population log likelihood.\n","        Args: \n","            X (torch.Tensor): input feature covariates num_samples by dims\n","            y (torch.Tensor): dependent variable predictions num_samples by 1\n","        \"\"\"\n","        assert isinstance(X, Tensor), \"X is type: {}. expected type torch.Tensor.\".format(type(X))\n","        assert isinstance(y, Tensor), \"y is type: {}. expected type torch.Tensor.\".format(type(y))\n","        assert X.size(0) >  X.size(1), \"number of dimensions, larger than number of samples. procedure expects matrix with size num samples by num feature dimensions.\" \n","        # assert y.dim() == 2 and y.size(1) == X.size(1), \"y is size: {}. expecting y tensor with size num_samples by {}.\".format(y.size(), X.size(1)) \n","\n","        self.A, self.Sigma = None, None\n","        self.train_loader_, self.val_loader_ = make_train_and_val(self.args, X, y) \n","        self.trunc_lds = KnownVarianceLDS(self.args, \n","                                          self.train_loader_, \n","                                          X.size(1))\n","        \n","        # run PGD for parameter estimation\n","        trainer = Trainer(self.trunc_lds, self.args, store=self.store) \n","        trainer.train_model((self.train_loader_, self.val_loader_))\n","        self.A = self.trunc_lds.model\n","\n","        self.A_0 = self.trunc_lds.A_0\n","        return self\n","\n","    def predict(self, x: Tensor): \n","        \"\"\"\n","        Make predictions with regression estimates.\n","        \"\"\"\n","        return x@self.trunc_lds.model\n","\n","    @property\n","    def A_0_(self): \n","        \"\"\"\n","        Regression coefficient weights.\n","        \"\"\"\n","        return self.A_0\n","    \n","    @property\n","    def A_(self): \n","        \"\"\"\n","        Regression coefficient weights.\n","        \"\"\"\n","        return self.A\n","\n","    @property\n","    def variance_(self): \n","        \"\"\"\n","        Noise variance prediction for linear regression with\n","        unknown noise variance algorithm.\n","        \"\"\"\n","        if self.args.noise_var is None: \n","            return self.variance\n","        else: \n","            warnings.warn(\"no variance prediction because regression with known variance was run\")\n","    \n","    @property\n","    def emp_coef_(self): \n","        \"\"\"\n","        Empirical estimates for weight matrix.\n","        \"\"\"\n","        return self.trunc_lds.A_0.clone()\n","\n","    @property\n","    def emp_variance_(self): \n","        \"\"\"\n","        Empirical estimates for noise variance.\n","        \"\"\"\n","        return self.trunc_lds.emp_var.clone()\n","\n","\n","class KnownVarianceLDS(LinearModel):\n","    \"\"\"\n","    Truncated linear dynamic system with known noise variance model.\n","    \"\"\"\n","    def __init__(self, args, train_loader, d): \n","        \"\"\"\n","        Args: \n","            args (cox.utils.Parameters) : parameter object holding hyperparameters\n","        \"\"\"\n","        super().__init__(args, d=d, k=d)\n","        self.A_0, self.Sigma_0, self.Sigma = None, None, None\n","        self.X, self.y = train_loader.dataset[:]\n","        self.base_radius = 10\n","        self.noise_var = ch.ones([1, 1])\n","        if self.args.alpha == 0.0: \n","          import pdb; pdb.set_trace()\n","        self.s = self.args.c_s * (ch.sqrt(ch.log(Tensor([1/self.args.alpha]))) + 1)\n","\n","    def pretrain_hook(self): \n","      self.calc_emp_model()\n","      self.params = [{\"params\": [self.model]}]\n","\n","    def calc_emp_model(self): \n","      self.A_0 = self.args.A_0\n","      if self.A_0 is None:\n","        emp_lin_reg = LinearRegression(fit_intercept=False)\n","        emp_lin_reg.fit(self.X, self.y)\n","        self.A_0 = ch.from_numpy(emp_lin_reg.coef_)\n","\n","      self.model.data = self.A_0.clone()\n","\n","      XXT = ch.bmm(self.X.view(self.X.size(0), self.X.size(1), 1), \\\n","                  self.X.view(self.X.size(0), 1, self.X.size(1)))\n","      XXT_sum = XXT.sum(0)\n","\n","      if 'sigma_0' in self.args.as_dict() and self.args.as_dict()['sigma_0'] is not None: \n","        self.Sigma_0 = self.args.as_dict()['sigma_0']\n","      else:\n","        self.Sigma_0 = (1 / (self.s * len(self.X))) * XXT_sum\n","\n","      if ch.det(self.Sigma_0) == 0: \n","        import pdb; pdb.set_trace()\n","      assert ch.det(self.Sigma_0) != 0, 'Sigma_0 is singular and non-invertible'\n","\n","      self.Sigma = self.Sigma_0.clone()\n"," \n","    def __call__(self, batch): \n","        \"\"\"\n","        Calculates the negative log likelihood of the current regression estimates of the validation set.\n","        Args: \n","            proc (bool) : boolean indicating whether, the function is being called within \n","            a stochastic process, or someone is accessing the parent class\"s property\n","        \"\"\"\n","        x, y = batch\n","        pred = (self.model@x.T).T\n","\n","        # update values of Sigma\n","        try: \n","          self.Sigma += ch.bmm(x.view(x.size(0), x.size(1), 1),  x.view(x.size(0), 1, x.size(1))).mean(0)\n","        except: \n","          import pdb; pdb.set_trace()\n","\n","        loss = SwitchGrad.apply(pred, y, self.args.phi, \n","                                self.args.c_gamma, self.args.alpha,\n","                                self.args.T, self.args.noise_var, self.args.num_samples, \n","                                self.args.eps)\n","\n","        return [loss, None, None]\n","      \n","    def pre_step_hook(self): \n","      self.model.grad = self.model.grad@self.Sigma.inverse()\n","      lr = self.optimizer.state_dict()['param_groups'][0]['lr']"]},{"cell_type":"code","source":["from trainer import Trainer"],"metadata":{"id":"3FO99wpQ27w1"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":104208,"status":"ok","timestamp":1666281102239,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"U6OdxwWpQmUT","outputId":"2a9f1b57-742a-4930-cbcc-9bb8af2d52a6"},"outputs":[{"output_type":"stream","name":"stdout","text":["learning rate: 3.3624556900000004\n","trial: 1\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 1 - Loss: -4.877066612243652\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 2 - Loss: -4.873147964477539\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 3 - Loss: -4.872204303741455\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 4 - Loss: -4.873830795288086\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 5 - Loss: -4.874353408813477\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 6 - Loss: -4.874597072601318\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 7 - Loss: -4.873429775238037\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 8 - Loss: -4.873608112335205\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 9 - Loss: -4.873767852783203\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                                "]},{"output_type":"stream","name":"stdout","text":["Epoch 10 - Loss: -4.874924182891846\n"]},{"output_type":"stream","name":"stderr","text":["\r"]},{"output_type":"execute_result","data":{"text/plain":["<__main__.TruncatedLDS at 0x7f5c89a4b2d0>"]},"metadata":{},"execution_count":10}],"source":["train_kwargs = Parameters({\n","    'phi': phi, \n","    'c_gamma': 2.0,\n","    'epochs': 10, \n","    'trials': 1, \n","    'batch_size': 10,\n","    'constant': True,\n","    'verbose': True,\n","    'fit_intercept': False,\n","    'num_samples': 100,\n","    'T': T,\n","    'alpha': alpha,\n","    'c_s': 100, \n","    'tol': 1e-1,\n","})\n","\n","lr = (1/train_kwargs.alpha) ** train_kwargs.c_gamma\n","train_kwargs.__setattr__('lr', lr)\n","print(f'learning rate: {lr}')\n","\n","trunc_lds = TruncatedLDS(train_kwargs)\n","trunc_lds.fit(X, Y)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1666281102239,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"-I22sPF45Uv0","outputId":"62377c81-a797-45b7-fd08-fdfffa7195d5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Ground Truth A: \n"," tensor([[-0.5300, -1.3035,  0.4438,  1.2221,  1.0395,  0.9608,  0.4214,  0.7452,\n","         -1.8389, -1.2497],\n","        [-0.2485,  0.1428, -1.0509,  0.3527, -0.0916,  0.0341, -0.8986,  0.1022,\n","         -0.6627, -0.1350],\n","        [-0.3983, -1.7892,  1.2785,  1.3351, -0.3066,  1.0382,  1.2762,  0.0419,\n","         -1.2794, -1.8432],\n","        [ 0.8633, -1.7786, -0.8080, -0.8735,  0.9367, -1.2319,  1.5287, -0.2759,\n","         -0.8625, -0.1915],\n","        [-0.4807, -1.4154,  0.0934, -0.2420, -1.0300, -0.2034, -0.6882, -0.0178,\n","          1.1983, -0.8180],\n","        [-0.7297,  0.8256,  0.8756,  0.2960,  0.6394,  1.2406, -1.2100, -0.9481,\n","          0.6444,  0.2188],\n","        [-1.2224, -0.9322, -0.3832,  1.4027,  0.4913,  1.0152, -0.0184, -0.8487,\n","          1.8939, -0.0325],\n","        [ 0.3191, -0.5700, -0.4292, -1.0216, -0.5285,  1.6272, -0.2411, -2.1021,\n","         -0.0179,  0.2241],\n","        [ 0.4389,  1.6109, -0.7284, -1.6016,  0.7329, -0.7448,  2.2900,  0.1214,\n","          0.4600,  0.1848],\n","        [ 0.4180,  0.6184,  0.5975,  0.5968, -0.5111, -0.2617, -1.3285,  0.6058,\n","          1.5191,  0.4225]])\n","Trunc LDS A0: \n"," tensor([[-4.3804e-01, -1.1725e+00,  3.4491e-01,  1.0711e+00,  8.5594e-01,\n","          8.2853e-01,  4.2361e-01,  7.4647e-01, -1.6443e+00, -1.1093e+00],\n","        [-2.2819e-01,  1.0816e-01, -9.7954e-01,  3.3498e-01, -6.0305e-02,\n","          7.5339e-02, -7.9532e-01,  9.4706e-02, -5.8346e-01, -1.1812e-01],\n","        [-2.9989e-01, -1.6166e+00,  1.1466e+00,  1.1870e+00, -2.8686e-01,\n","          9.2115e-01,  1.1285e+00,  5.1956e-02, -1.1173e+00, -1.6176e+00],\n","        [ 7.4499e-01, -1.5488e+00, -7.2427e-01, -7.6591e-01,  8.8468e-01,\n","         -1.1204e+00,  1.3209e+00, -2.4165e-01, -7.3178e-01, -1.4967e-01],\n","        [-4.7485e-01, -1.2786e+00,  8.4220e-02, -1.5674e-01, -9.0737e-01,\n","         -1.6507e-01, -6.2170e-01,  1.4138e-03,  1.0691e+00, -7.3927e-01],\n","        [-6.9647e-01,  6.9070e-01,  7.8255e-01,  2.1771e-01,  6.3378e-01,\n","          1.1238e+00, -1.0395e+00, -8.2314e-01,  5.0135e-01,  2.2143e-01],\n","        [-1.0628e+00, -7.9205e-01, -3.5165e-01,  1.2236e+00,  4.8001e-01,\n","          8.1755e-01,  2.2140e-02, -7.7734e-01,  1.6758e+00, -2.4341e-02],\n","        [ 2.7472e-01, -4.8484e-01, -3.7979e-01, -9.1090e-01, -4.9272e-01,\n","          1.4755e+00, -1.7367e-01, -1.8798e+00,  4.6710e-02,  1.9321e-01],\n","        [ 3.8140e-01,  1.4528e+00, -6.1948e-01, -1.3628e+00,  6.2267e-01,\n","         -6.7904e-01,  2.0117e+00,  1.3740e-01,  3.9911e-01,  1.4212e-01],\n","        [ 3.4025e-01,  5.3109e-01,  5.5455e-01,  5.6343e-01, -4.8477e-01,\n","         -2.3855e-01, -1.2212e+00,  5.6317e-01,  1.3279e+00,  3.2210e-01]])\n","Trunc LDS Estimated A: \n"," Parameter containing:\n","tensor([[-0.4801, -1.2866,  0.3879,  1.1798,  0.9270,  0.9044,  0.4563,  0.8079,\n","         -1.7927, -1.2170],\n","        [-0.2518,  0.1154, -1.0629,  0.3732, -0.0701,  0.0827, -0.8746,  0.1078,\n","         -0.6305, -0.1302],\n","        [-0.3309, -1.7778,  1.2546,  1.3056, -0.3141,  1.0109,  1.2340,  0.0590,\n","         -1.2248, -1.7722],\n","        [ 0.8119, -1.6963, -0.7856, -0.8336,  0.9593, -1.2219,  1.4551, -0.2562,\n","         -0.8014, -0.1685],\n","        [-0.5140, -1.4009,  0.0899, -0.1596, -0.9893, -0.1781, -0.6792,  0.0069,\n","          1.1732, -0.7979],\n","        [-0.7606,  0.7575,  0.8537,  0.2401,  0.6796,  1.2281, -1.1378, -0.8907,\n","          0.5492,  0.2454],\n","        [-1.1610, -0.8682, -0.3797,  1.3396,  0.5144,  0.8889,  0.0143, -0.8450,\n","          1.8313, -0.0353],\n","        [ 0.2840, -0.5300, -0.4095, -0.9914, -0.5383,  1.6035, -0.1942, -2.0466,\n","          0.0531,  0.2094],\n","        [ 0.4240,  1.5921, -0.6730, -1.4973,  0.6787, -0.7468,  2.2042,  0.1475,\n","          0.4291,  0.1632],\n","        [ 0.3646,  0.5826,  0.6023,  0.6099, -0.5251, -0.2619, -1.3375,  0.6131,\n","          1.4450,  0.3545]])\n"]}],"source":["print('Ground Truth A: \\n {}'.format(A))\n","print('Trunc LDS A0: \\n {}'.format(trunc_lds.A_0_))\n","print('Trunc LDS Estimated A: \\n {}'.format(trunc_lds.A_))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1666281102239,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"BTAMCUXef01K","outputId":"5fe0009d-fb90-4d42-e9bf-cf4ffdc8af50"},"outputs":[{"output_type":"stream","name":"stdout","text":["A, Trunc LDS: 0.04567921161651611\n","A, A0: 0.11343107372522354\n"]}],"source":["print('A, Trunc LDS: {}'.format(ch.sqrt(mse_loss(A.flatten(), trunc_lds.A_.flatten()))))\n","print('A, A0: {}'.format(ch.sqrt(mse_loss(A.flatten(), trunc_lds.A_0_.flatten()))))"]},{"cell_type":"markdown","metadata":{"id":"5STXHnoBW4hQ"},"source":["# Plevrakis Algorithm Stress Test \n","Experiment here tests Plevrakis's algorithm against varying truncation sets."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3ivyYgVIirr5"},"outputs":[],"source":["OUT_DIR = '/content/drive/MyDrive/Results/plev/'\n","EXP = '10k'\n","TRIALS = 5\n","TABLE_NAME = 'results'"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":189593,"status":"ok","timestamp":1666281291830,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"CtzizthfgR5p","outputId":"fc050ff8-d676-448c-c996-93d2616b74b6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Logging in: /content/drive/MyDrive/Results/plev/10k/7707782d-24b6-42a1-aef4-307245afa043\n","A: \n"," tensor([[0.1579, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","         0.0000],\n","        [0.0000, 0.6450, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","         0.0000],\n","        [0.0000, 0.0000, 0.1918, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","         0.0000],\n","        [0.0000, 0.0000, 0.0000, 0.8979, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","         0.0000],\n","        [0.0000, 0.0000, 0.0000, 0.0000, 0.3333, 0.0000, 0.0000, 0.0000, 0.0000,\n","         0.0000],\n","        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.2382, 0.0000, 0.0000, 0.0000,\n","         0.0000],\n","        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.2487, 0.0000, 0.0000,\n","         0.0000],\n","        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.3640, 0.0000,\n","         0.0000],\n","        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.7727,\n","         0.0000],\n","        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n","         0.3523]])\n","A shape is: torch.Size([10, 10])\n","Singular Values: tensor([0.8979, 0.7727, 0.6450, 0.3640, 0.3523, 0.3333, 0.2487, 0.2382, 0.1918,\n","        0.1579])\n","Spectral Norm: 0.8978543877601624\n"]}],"source":["# create store and add table\n","store = Store(OUT_DIR + EXP)\n","store.add_table(TABLE_NAME, { \n","  'alpha': float, \n","  'logit_ball': float,\n","  'trunc_rmse': float, \n","  'emp_rmse': float,\n","})\n","\n","\n","# generate synthetic data \n","\n","D = 10 # number of dimensions for A_{*} matrix\n","T = 10000\n","A = ch.rand(ch.Size([D, 1])) * ch.eye(D)\n","print(f'A: \\n {A}')\n","print('A shape is: {}'.format(A.size()))\n","\n","u, s, v = LA.svd(A)\n","print(f'Singular Values: {s}')\n","\n","spectral_norm = s.max()\n","print(f'Spectral Norm: {spectral_norm}')\n","\n","\n","def generate_data(phi, A): \n","  with ch.no_grad():\n","    X, Y = ch.Tensor([]), ch.Tensor([])\n","\n","    x_t = ch.rand(ch.Size([1, D]))\n","    total_samples = 0\n","    while X.size(0) < T: \n","      y_t = x_t@A + ch.randn(x_t.size())\n","      if phi(y_t): \n","        X = ch.cat([X, x_t])\n","        Y = ch.cat([Y, y_t])\n","        x_t = y_t\n","      else: \n","        x_t = ch.rand(ch.Size([1, D]))\n","      total_samples += 1\n","\n","  alpha = T / total_samples\n","\n","  return X, Y, alpha\n","\n","LOGIT_BALLS = [4.0, 4.5, 5.0, 6.0]\n","\n","for i in range(TRIALS): \n","\n","  for norm in LOGIT_BALLS:\n","    # phi = oracle.LogitBallComplement(norm) \n","    phi = oracle.LogitBall(norm)\n","    alpha = 0.0\n","    while alpha < .2: \n","      X, Y, alpha = generate_data(phi, A)\n","\n","    train_kwargs = Parameters({\n","      'phi': phi, \n","      'c_gamma': 2.0,\n","      'epochs': 10, \n","      'trials': 1, \n","      'batch_size': 50,\n","      'constant': True,\n","      'fit_intercept': False,\n","      'num_samples': 100,\n","      'T': T,\n","      'alpha': alpha,\n","      'c_s': 100\n","    })\n","\n","    lr = (1/train_kwargs.alpha) ** train_kwargs.c_gamma\n","    train_kwargs.__setattr__('lr', lr)\n","\n","    trunc_lds = TruncatedLDS(train_kwargs)\n","    trunc_lds.fit(X, Y)\n","\n","    A_trunc_lds, A_0 = trunc_lds.A_, trunc_lds.A_0_\n","\n","    trunc_rmse = float(ch.sqrt(mse_loss(A.flatten(), A_trunc_lds.flatten())))\n","    emp_rmse = float(ch.sqrt(mse_loss(A.flatten(), A_0.flatten())))\n","\n","    store[TABLE_NAME].update_row({ \n","        'alpha': alpha, \n","        'trunc_rmse': trunc_rmse, \n","        'emp_rmse': emp_rmse,\n","        'logit_ball': norm,\n","    })\n","\n","    store[TABLE_NAME].flush_row()\n","\n","store.close()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":224},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1666281291830,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"xdZsMl8Rpr0G","outputId":"446a7362-ae7c-4606-f956-f084b8a40084"},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 2/2 [00:00<00:00, 69.17it/s]\n"]},{"output_type":"execute_result","data":{"text/plain":["   index     alpha  logit_ball  trunc_rmse  emp_rmse  \\\n","0      0  0.773096         4.0    0.012533  0.026567   \n","1      1  0.878503         4.5    0.012019  0.019475   \n","2      2  0.931793         5.0    0.011915  0.014432   \n","3      3  0.984058         6.0    0.008618  0.008877   \n","4      4  0.772201         4.0    0.015314  0.028669   \n","\n","                                 exp_id  \n","0  89945109-c2db-4a66-8be4-60a34f85fd6c  \n","1  89945109-c2db-4a66-8be4-60a34f85fd6c  \n","2  89945109-c2db-4a66-8be4-60a34f85fd6c  \n","3  89945109-c2db-4a66-8be4-60a34f85fd6c  \n","4  89945109-c2db-4a66-8be4-60a34f85fd6c  "],"text/html":["\n","  <div id=\"df-c6b75fd5-2a16-4f60-9bce-7263fe72008e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>alpha</th>\n","      <th>logit_ball</th>\n","      <th>trunc_rmse</th>\n","      <th>emp_rmse</th>\n","      <th>exp_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0.773096</td>\n","      <td>4.0</td>\n","      <td>0.012533</td>\n","      <td>0.026567</td>\n","      <td>89945109-c2db-4a66-8be4-60a34f85fd6c</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0.878503</td>\n","      <td>4.5</td>\n","      <td>0.012019</td>\n","      <td>0.019475</td>\n","      <td>89945109-c2db-4a66-8be4-60a34f85fd6c</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>0.931793</td>\n","      <td>5.0</td>\n","      <td>0.011915</td>\n","      <td>0.014432</td>\n","      <td>89945109-c2db-4a66-8be4-60a34f85fd6c</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>0.984058</td>\n","      <td>6.0</td>\n","      <td>0.008618</td>\n","      <td>0.008877</td>\n","      <td>89945109-c2db-4a66-8be4-60a34f85fd6c</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>0.772201</td>\n","      <td>4.0</td>\n","      <td>0.015314</td>\n","      <td>0.028669</td>\n","      <td>89945109-c2db-4a66-8be4-60a34f85fd6c</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c6b75fd5-2a16-4f60-9bce-7263fe72008e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c6b75fd5-2a16-4f60-9bce-7263fe72008e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c6b75fd5-2a16-4f60-9bce-7263fe72008e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":15}],"source":["reader = CollectionReader(OUT_DIR + EXP)\n","logs = reader.df(TABLE_NAME).reset_index()\n","reader.close()\n","logs.head(5)"]},{"cell_type":"code","source":["import plotly.graph_objects as go\n","\n","\n","def measurement_scatter(mean: pd.Series, \n","                        upper: pd.Series, \n","                        lower: pd.Series,\n","                        title: str, \n","                        color: str): \n","\n","\n","  shade = 'rgba(0, 0, 255, .2)'\n","  if color == 'red': \n","    shade = 'rgba(255, 0, 0, .2)'\n","  return [go.Scatter(\n","        x=mean.index,\n","        y=mean,\n","        line=dict(color=color),\n","        mode='lines+markers',\n","        name='Mean \\n' + title,\n","    ),\n","    go.Scatter(\n","        name='Upper Bound \\n' + title,\n","        x=upper.index,\n","        y=upper,\n","        mode='lines',\n","        marker=dict(color=\"#444\"),\n","        line=dict(width=0),\n","        showlegend=False,\n","        fill='tonexty',\n","        fillcolor=shade\n","    ),\n","    go.Scatter(\n","        name='Lower Bound \\n' + title,\n","        x=lower.index,\n","        y=lower,        \n","        marker=dict(color=\"#444\"),\n","        line=dict(width=0),\n","        mode='lines',\n","        fillcolor=shade,\n","        fill='tonexty',\n","        showlegend=False\n","    )]"],"metadata":{"id":"SBpaElle5TPK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["mean = logs.groupby('logit_ball').mean()\n","std_dev = np.sqrt(logs.groupby('logit_ball').var())\n","lower, upper = mean - 2*std_dev, mean + 2*std_dev"],"metadata":{"id":"tLl83MC95X53"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["colors = ['blue', 'red']\n","\n","spec_A = ['trunc_rmse', 'emp_rmse']\n","\n","scatter = []\n","for i in enumerate(mean[spec_A].columns): \n","  scatter = scatter + measurement_scatter(mean[i[1]], upper[i[1]], lower[i[1]], i[1], color=colors[i[0]])\n","\n","\n","fig = go.Figure(scatter)\n","\n","fig.update_layout(\n","    yaxis_title='RMSE',\n","    xaxis_title='Logit Ball Size',\n","    hovermode=\"x\", \n","    plot_bgcolor='rgba(0, 0, 0, 0)',\n","    paper_bgcolor='rgba(0, 0, 0, 0)',\n",")\n","\n","fig.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"7FrLi-i65mrW","executionInfo":{"status":"ok","timestamp":1666281292038,"user_tz":420,"elapsed":3,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"}},"outputId":"1cb2d4a3-4f6b-432b-921a-1651bc3264e0"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"7bb05ef4-e5cc-4bff-a5e1-bee8c5a7dc93\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"7bb05ef4-e5cc-4bff-a5e1-bee8c5a7dc93\")) {                    Plotly.newPlot(                        \"7bb05ef4-e5cc-4bff-a5e1-bee8c5a7dc93\",                        [{\"line\":{\"color\":\"blue\"},\"mode\":\"lines+markers\",\"name\":\"Mean \\ntrunc_rmse\",\"x\":[4.0,4.5,5.0,6.0],\"y\":[0.013835947588086128,0.012251405604183674,0.010867949575185776,0.009407496452331543],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(0, 0, 255, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Upper Bound \\ntrunc_rmse\",\"showlegend\":false,\"x\":[4.0,4.5,5.0,6.0],\"y\":[0.016113352597705646,0.013432777810540048,0.012612789585643656,0.01056537586554088],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(0, 0, 255, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Lower Bound \\ntrunc_rmse\",\"showlegend\":false,\"x\":[4.0,4.5,5.0,6.0],\"y\":[0.011558542578466608,0.011070033397827299,0.009123109564727895,0.008249617039122206],\"type\":\"scatter\"},{\"line\":{\"color\":\"red\"},\"mode\":\"lines+markers\",\"name\":\"Mean \\nemp_rmse\",\"x\":[4.0,4.5,5.0,6.0],\"y\":[0.02763127498328686,0.018809470906853677,0.013567536137998104,0.009553790278732776],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(255, 0, 0, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Upper Bound \\nemp_rmse\",\"showlegend\":false,\"x\":[4.0,4.5,5.0,6.0],\"y\":[0.02968290117023832,0.021814300460620144,0.015019636845946897,0.010758076750377913],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(255, 0, 0, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Lower Bound \\nemp_rmse\",\"showlegend\":false,\"x\":[4.0,4.5,5.0,6.0],\"y\":[0.025579648796335397,0.01580464135308721,0.012115435430049311,0.00834950380708764],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"yaxis\":{\"title\":{\"text\":\"RMSE\"}},\"xaxis\":{\"title\":{\"text\":\"Logit Ball Size\"}},\"hovermode\":\"x\",\"plot_bgcolor\":\"rgba(0, 0, 0, 0)\",\"paper_bgcolor\":\"rgba(0, 0, 0, 0)\"},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('7bb05ef4-e5cc-4bff-a5e1-bee8c5a7dc93');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"KLW8f0cfwLxH"},"source":["# Truncated LQR\n","Here, we provide an implementation of our algorithm. "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":205,"status":"ok","timestamp":1666281292241,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"bz5HMhREwM2X","outputId":"39fcc5f9-e2fb-48e7-c3ab-0de2411eb3b1"},"outputs":[{"output_type":"stream","name":"stdout","text":["A: \n"," tensor([[-1.2188,  0.0368,  0.0645, -1.9796, -0.6029],\n","        [-0.0772,  1.0464, -1.4015,  0.3168, -0.2026],\n","        [-1.6325,  0.3652, -0.8945,  0.2602,  0.3826],\n","        [-0.2312, -1.2756,  0.4480, -0.3513,  0.2966],\n","        [-1.1805, -1.1907,  0.0538,  1.2084,  0.0702]])\n","B: \n"," tensor([[-0.2499,  0.2798, -0.0267, -0.3251, -1.0934,  0.7659, -0.2726, -0.4499],\n","        [-0.2307,  0.1990, -0.7557,  1.3320,  1.1564,  0.1491, -1.0932, -0.7266],\n","        [-0.0605,  0.9901,  1.9822, -0.2146,  0.8464,  0.1029, -0.1108,  0.2127],\n","        [ 0.0543,  0.3977, -0.0977, -0.2017, -0.6410, -0.1603, -1.8433,  1.4647],\n","        [-0.7164, -0.3062, -0.7425, -0.8752,  0.9260,  0.3493,  0.5780,  1.0384]])\n"]}],"source":["# This is for the exploration radius for first 2.\n","\n","gamma_default = 2.0\n","gamma = gamma_default\n","\n","# Here, m >= d must hold\n","D = 5\n","M = 8\n","\n","assert M >= D, f'M is currently: {M}, but it needs to be larger than D: {D}'\n","# I design A as a random matrix, which the eigen values at range [0.5,2]\n","fake_A = ch.randn((D, D))\n","u, s, v = LA.svd(fake_A)\n","s2 = ch.diag(ch.rand(D)*2.5+0.5)\n","A = u@s2@v\n","# I design B as a random matrix, which the eigen values also at range [0.5,2]\n","fake_B = ch.randn((D,M))\n","u, s, v = LA.svd(fake_B)\n","s2 = ch.zeros((D, M))\n","s2[:D, :D] = ch.diag(ch.rand(D)*2.5+0.5)\n","B = u@s2@v\n","U_A = 3\n","U_B = 3\n","L_B = 0.5\n","R = 20\n","\n","# membership oracle\n","phi = oracle.LogitBall(R)\n","\n","print(f'A: \\n {A}')\n","print(f'B: \\n {B}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1666281292241,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"Nvtx3oKwFTDu","outputId":"11c97d06-244e-4433-ccd2-0c05b849f24e"},"outputs":[{"output_type":"stream","name":"stdout","text":["U size: torch.Size([5, 5])\n","S size: torch.Size([5])\n","V Size: torch.Size([8, 8])\n","A: \n","[[-1.2187773   0.0367902   0.06451821 -1.9795705  -0.6028793 ]\n"," [-0.07723979  1.046423   -1.4015404   0.31676573 -0.20258538]\n"," [-1.63248     0.36518028 -0.89450455  0.26017666  0.38260412]\n"," [-0.23120868 -1.2756305   0.44799787 -0.3513499   0.29658097]\n"," [-1.1804985  -1.190661    0.0537965   1.2083726   0.07018708]]\n","ATA Eigevalues: \n"," [6.4151955 +0.j 5.9720435 +0.j 6.1632843 +0.j 0.2879461 +0.j\n"," 0.32589227+0.j]\n","A Eigenvalues: \n"," [ 2.0300884 +0.j        -1.9183657 +0.j        -0.39417785+1.2825439j\n"," -0.39417785-1.2825439j -0.67139024+0.j       ]\n","B: \n","[[-0.2498817   0.27975842 -0.02666225 -0.32506973 -1.0933602   0.76587623\n","  -0.27260822 -0.44993502]\n"," [-0.23066753  0.19901483 -0.75568384  1.3319911   1.1564206   0.14910905\n","  -1.0932347  -0.72656345]\n"," [-0.06046995  0.9901359   1.9822342  -0.21459141  0.8463561   0.10288234\n","  -0.11075312  0.2126528 ]\n"," [ 0.05431616  0.3977495  -0.09768569 -0.2017161  -0.6410353  -0.16031905\n","  -1.8432721   1.4647427 ]\n"," [-0.71643656 -0.30615607 -0.742498   -0.87515104  0.9260026   0.34934288\n","   0.57795495  1.038369  ]]\n","BTB Eigevalues: \n"," [ 1.3731642e+00+0.0000000e+00j  4.4402833e+00+0.0000000e+00j\n","  5.6728048e+00+0.0000000e+00j  6.4093475e+00+0.0000000e+00j\n","  6.1817522e+00+0.0000000e+00j  2.6124417e-07+0.0000000e+00j\n"," -1.3292154e-07+5.1608108e-08j -1.3292154e-07-5.1608108e-08j]\n"]}],"source":["print('U size: {}'.format(u.size()))\n","print('S size: {}'.format(s.size()))\n","print('V Size: {}'.format(v.size()))\n","\n","print(f'A: \\n{A.data.numpy()}')\n","eigs_ATA = LA.eig(A.T@A)\n","print(f'ATA Eigevalues: \\n {eigs_ATA.eigenvalues.data.numpy()}')\n","eigs_A = LA.eig(A)\n","print(f'A Eigenvalues: \\n {eigs_A.eigenvalues.data.numpy()}')\n","\n","print(f'B: \\n{B.data.numpy()}')\n","eigs_BTB = LA.eig(B.T@B)\n","print(f'BTB Eigevalues: \\n {eigs_BTB.eigenvalues.data.numpy()}')"]},{"cell_type":"markdown","metadata":{"id":"JlMLYLPw135k"},"source":["# Generate Synthetic Data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bw1bopBPmZsk"},"outputs":[],"source":["# HELPER FUNCTIONS\n","def generate_trunc_lqr_data(phi, A, B, x_t, u_t = None, noise_var=ch.Tensor([1.0])): \n","  if u_t is None: u_t = ch.randn((1, B.size(1)))\n","  with ch.no_grad():\n","    M = ch.distributions.MultivariateNormal(ch.zeros(x_t.size(1)), ch.eye(x_t.size(1)))\n","    y_t = (A@x_t.T).T + (B@u_t.T).T + M.sample([x_t.size(0)])\n","    if phi(y_t): \n","      return y_t, u_t\n","    else: \n","      return None\n","\n","def calc_thickness(X):\n","  # Return the thickness of a positive semi-definite matrix\n","  return LA.eig(X).eigenvalues.real.min()"]},{"cell_type":"markdown","metadata":{"id":"FvDi8uqemlPt"},"source":["# Phase 1: Initialization of $A$ Estimate\n","For this phase, we set $u_t = 0$, and only use a few samples from the dataset to estimate $A$."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"z1UYQg7FLWEx"},"outputs":[],"source":["# First phase\n","# Although the data need me to throw away some data with small survival probability, I am not wanting to throw away them in practice.\n","\n","NOISE_VAR = ch.Tensor([1.0])\n","def phase_one():\n","  num_samples = 0\n","  num_trajectories = 1\n","  total_samples = 0\n","  target_thick = 32*U_A*U_A*max(U_A,U_B)/L_B\n","  x_t = ch.zeros((1, D))\n","  X, Y, U = ch.Tensor([]), ch.Tensor([]), ch.Tensor([])\n","  covariate_matrix = ch.zeros([D,D])\n","\n","  TOTAL_TRAJECTORIES = 0\n","  TOTAL_SAMPLES = 0\n","\n","  # The following data does NOT throw away data.\n","  '''\n","  The algorithm to get the samples are similar in three phases\n","  It may NOT directly follow the paper, some params are tuned\n","  I will notice those places if I remember\n","  '''\n","\n","  while(True):\n","    samples = generate_trunc_lqr_data(phi, A, B, x_t, u_t=ch.zeros((1, M)), noise_var=NOISE_VAR)\n","    total_samples += 1\n","    if samples is not None:\n","      y_t, u_t = samples\n","      X, Y, U = ch.cat((X,x_t)), ch.cat((Y,y_t)), ch.cat((U, u_t))\n","      # Get one sample, update and calculate the thickness\n","      covariate_matrix += x_t.T@x_t\n","      x_t = y_t\n","      num_samples += 1\n","      \"\"\"\n","      terminate the data generation, when the covariate vectors \n","      have enough thickness\n","      \"\"\"\n","      thickness = calc_thickness(covariate_matrix)\n","      # print(f'current thickness: {thickness}')\n","      if thickness > target_thick:\n","        # Remember! the ONLY and the most convenient way to judge\n","        # whether we have collected enough samples\n","        # is to check whether we have enough thickness.\n","        break\n","    else:\n","      # It fails! A trajectory fails iff yt is None\n","      x_t = ch.zeros((1, D))\n","      num_trajectories += 1\n","\n","    if total_samples % 1000 == 0: \n","      print(f'total number of samples: {total_samples}')\n","\n","  alpha = num_samples / total_samples\n","\n","  #You can un-comment to run the following code, it throws away some data\n","  X_1, Y_1 = X.clone(), Y.clone()\n","\n","  TOTAL_TRAJECTORIES += num_trajectories\n","  TOTAL_SAMPLES += num_samples\n","\n","  train_kwargs = Parameters({\n","      'phi': phi, \n","      'c_gamma': 2.0,\n","      'epochs': 10, \n","      'trials': 1, \n","      'batch_size': 100,\n","      'constant': True,\n","      'verbose': True,\n","      'fit_intercept': False,\n","      'num_samples': 100,\n","      'c_s': 100, \n","      'tol': 1e-2,\n","      'alpha': alpha, \n","      'n_iter_no_change': 3,\n","      'early_stopping': True,\n","  })\n","\n","\n","  lr = (1/train_kwargs.alpha) ** train_kwargs.c_gamma\n","  train_kwargs.__setattr__('lr', lr)\n","\n","  print('phase one num samples: {}'.format(X_1.size(0)))\n","  trunc_lds = TruncatedLDS(train_kwargs)\n","  trunc_lds.fit(X_1, Y_1)\n","\n","  return trunc_lds.A_0_, trunc_lds.A_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2481,"status":"ok","timestamp":1666281294721,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"fAodT7WZjHYm","outputId":"5350381c-2579-4ea6-c7f5-4a4dc385e34f"},"outputs":[{"output_type":"stream","name":"stdout","text":["total number of samples: 1000\n","total number of samples: 2000\n","phase one num samples: 1796\n","trial: 1\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 1 - Loss: -2.3145861625671387\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 2 - Loss: -2.314664363861084\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 3 - Loss: -2.310201406478882\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                  "]},{"output_type":"stream","name":"stdout","text":["Epoch 4 - Loss: -2.3112964630126953\n","Convergence after 4 epochs took 0.96 seconds\n"]},{"output_type":"stream","name":"stderr","text":["\r"]}],"source":["A0, A_HAT = phase_one()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1666281294721,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"VTRY7O9U3Xwd","outputId":"160aa6dd-a780-4352-a5c2-e2721fac9604"},"outputs":[{"output_type":"stream","name":"stdout","text":["Ground Truth A: \n"," tensor([[-1.2188,  0.0368,  0.0645, -1.9796, -0.6029],\n","        [-0.0772,  1.0464, -1.4015,  0.3168, -0.2026],\n","        [-1.6325,  0.3652, -0.8945,  0.2602,  0.3826],\n","        [-0.2312, -1.2756,  0.4480, -0.3513,  0.2966],\n","        [-1.1805, -1.1907,  0.0538,  1.2084,  0.0702]])\n","OLS A0: \n"," tensor([[-1.2529,  0.0368,  0.0634, -1.9651, -0.6081],\n","        [-0.0748,  1.0298, -1.3703,  0.3480, -0.2050],\n","        [-1.6271,  0.3646, -0.8940,  0.2360,  0.4010],\n","        [-0.2325, -1.2522,  0.4561, -0.3477,  0.2657],\n","        [-1.1843, -1.1810,  0.0551,  1.1973,  0.0795]])\n","Trunc LDS Estimated A: \n"," Parameter containing:\n","tensor([[ 1.5038e-01,  1.3019e-02,  4.2550e-03, -4.9504e-03, -1.5594e-02,\n","          3.1831e-04, -3.4687e-03,  1.5785e-02, -2.0822e-03,  9.9634e-04],\n","        [ 2.2023e-04,  6.3568e-01,  1.2440e-03,  3.4449e-03, -1.5839e-02,\n","          5.8220e-03,  2.0278e-03,  2.0348e-03,  6.7105e-03, -2.1211e-03],\n","        [ 5.9619e-03, -4.9837e-03,  1.6683e-01, -1.4925e-03,  5.3792e-03,\n","         -1.9112e-02, -4.1513e-03,  6.1725e-03, -5.0857e-03,  3.5097e-03],\n","        [ 1.6653e-02, -1.8187e-02,  1.2789e-02,  9.0166e-01,  2.5473e-03,\n","         -3.0034e-04, -1.1310e-02, -8.4841e-03,  1.6868e-03,  1.0246e-02],\n","        [-1.3019e-02, -6.5300e-03,  4.6263e-03,  3.7971e-03,  3.3179e-01,\n","          3.4555e-04,  1.2316e-02, -2.0192e-02,  4.1145e-03, -9.3631e-03],\n","        [-3.2401e-03,  2.3065e-03, -1.0893e-02,  4.8280e-03,  1.6858e-03,\n","          2.2694e-01,  8.0968e-04,  8.5456e-04,  6.8822e-03, -6.1675e-03],\n","        [-5.5676e-03, -1.3563e-03, -2.5618e-03,  8.2898e-03, -1.2366e-02,\n","          1.7321e-02,  2.6195e-01,  1.2306e-02,  3.5692e-03,  2.4228e-02],\n","        [-1.6960e-02, -9.8512e-03,  1.5197e-04,  9.2822e-03,  2.6577e-02,\n","         -2.6861e-03,  6.1634e-03,  3.5770e-01, -1.4267e-02, -1.7586e-02],\n","        [-1.1070e-02, -9.2448e-03,  1.0341e-02,  2.1258e-03,  5.0984e-04,\n","          9.7008e-03, -2.4257e-03,  4.4248e-06,  7.6148e-01, -5.6154e-03],\n","        [-3.4619e-03,  1.2059e-02,  3.4531e-03,  2.5391e-03,  5.7724e-03,\n","         -2.8772e-02, -5.9194e-03, -3.1569e-03,  7.1135e-05,  3.5727e-01]])\n"]}],"source":["print('Ground Truth A: \\n {}'.format(A))\n","print('OLS A0: \\n {}'.format(A0))\n","print('Trunc LDS Estimated A: \\n {}'.format(trunc_lds.A_))"]},{"cell_type":"markdown","metadata":{"id":"4nPZySyGWsFl"},"source":["# Phase 2"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7rVyLeCwDYr7"},"outputs":[],"source":["def phase_two(): \n","  # Second phase\n","  num_samples = 0\n","  num_trajectories = 0\n","  total_samples = 0\n","  target_thick = 32*U_A*U_A*max(U_A,U_B)/L_B\n","  # This can be tuned\n","  # This one I can't remember the number, but just like that is ok\n","  index = 0\n","  xt = ch.zeros((1, D))\n","  ident = ch.eye(M)\n","  # Mat, Sig, ident = LA.svd(ch.randn(M,M))\n","  # This is the orthogonal basis.\n","  U, Y = ch.Tensor([]), ch.Tensor([])\n","  curr_mat = ch.zeros([M,M])\n","  gamma = R/U_B\n","  # You could tune this. I changed the value from paper.\n","\n","  while(True):\n","    # Remember this phase is 1 trajectory 1 sample\n","    u = gamma*ident[index]\n","    y = generate_trunc_lqr_data(phi, ch.zeros(D, D), B, xt, u, noise_var=NOISE_VAR)\n","\n","    total_samples += 1\n","    if y is not None:\n","      y, u = y\n","      num_samples += 1\n","      index = (index+1)%M\n","      # Remember to modulo m!\n","      # if index == 0:\n","      #   Mat, Sig, ident = LA.svd(ch.randn(M,M))\n","      U = ch.cat([U, u[None,...]])\n","      Y = ch.cat([Y, y])\n","\n","      curr_mat += u[...,None]@u[None,...]\n","      thickness = calc_thickness(curr_mat)\n","      if thickness > target_thick and U.size(0) > U.size(1):\n","        break\n","\n","  alpha = num_samples / total_samples\n","  U_2, Y_2 = U.clone(), Y.clone()\n","\n","  # num_samples is the row shape of U\n","  num_samples, num_trajectories\n","\n","  train_kwargs = Parameters({\n","      'phi': phi, \n","      'c_gamma': 2.0,\n","      'epochs': 10, \n","      'trials': 1, \n","      'batch_size': 100,\n","      'constant': True,\n","      'verbose': True,\n","      'fit_intercept': False,\n","      'num_samples': 100,\n","      'c_s': 100, \n","      'tol': 1e-2,\n","      'n_iter_no_change': 2,\n","      'early_stopping': True,\n","      'alpha': alpha, \n","  })\n","\n","  \n","  lr = (1/train_kwargs.alpha) ** train_kwargs.c_gamma\n","  train_kwargs.__setattr__('lr', lr)\n","\n","  print('phase two num samples: {}'.format(U_2.size(0)))\n","  trunc_lds = TruncatedLDS(train_kwargs)\n","  trunc_lds.fit(U_2, Y_2)\n","\n","  return trunc_lds.A_0_, trunc_lds.A_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":294,"status":"ok","timestamp":1666281295012,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"6hnzx1JDewme","outputId":"d20cfc48-4c45-43bd-e870-c833ef0de662"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: UserWarning:\n","\n","The use of `x.T` on tensors of dimension other than 2 to reverse their shape is deprecated and it will throw an error in a future release. Consider `x.mT` to transpose batches of matricesor `x.permute(*torch.arange(x.ndim - 1, -1, -1))` to reverse the dimensions of a tensor. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2981.)\n","\n"]},{"output_type":"stream","name":"stdout","text":["phase two num samples: 312\n","trial: 1\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 1 - Loss: -2.220324993133545\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 2 - Loss: -2.2213399410247803\n"]},{"output_type":"stream","name":"stderr","text":["                                                                                                                  "]},{"output_type":"stream","name":"stdout","text":["Epoch 3 - Loss: -2.226228713989258\n","Convergence after 3 epochs took 0.22 seconds\n"]},{"output_type":"stream","name":"stderr","text":["\r"]}],"source":["B0, B_HAT = phase_two()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1666281295012,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"yPa26FfsvWkF","outputId":"c548a7a9-2f8c-413d-bbbf-c3f64e850cfe"},"outputs":[{"output_type":"stream","name":"stdout","text":["Ground Truth B: \n","tensor([[-0.2499,  0.2798, -0.0267, -0.3251, -1.0934,  0.7659, -0.2726, -0.4499],\n","        [-0.2307,  0.1990, -0.7557,  1.3320,  1.1564,  0.1491, -1.0932, -0.7266],\n","        [-0.0605,  0.9901,  1.9822, -0.2146,  0.8464,  0.1029, -0.1108,  0.2127],\n","        [ 0.0543,  0.3977, -0.0977, -0.2017, -0.6410, -0.1603, -1.8433,  1.4647],\n","        [-0.7164, -0.3062, -0.7425, -0.8752,  0.9260,  0.3493,  0.5780,  1.0384]])\n","OLS B0: \n","tensor([[-0.2439,  0.3511, -0.0299, -0.3313, -1.0609,  0.7613, -0.2747, -0.4321],\n","        [-0.2173,  0.1722, -0.7585,  1.3908,  1.1642,  0.2002, -1.0875, -0.7150],\n","        [-0.0648,  0.9990,  1.9832, -0.2516,  0.7918,  0.1094, -0.0884,  0.1988],\n","        [ 0.0513,  0.4353, -0.1082, -0.1522, -0.6463, -0.1447, -1.8847,  1.4480],\n","        [-0.7220, -0.3078, -0.7296, -0.8546,  0.9322,  0.3422,  0.5568,  1.0343]])\n","Trunc LDS Estimated B: \n","tensor([[-0.2441,  0.3504, -0.0312, -0.3403, -1.0648,  0.7637, -0.2736, -0.4204],\n","        [-0.2296,  0.1684, -0.7594,  1.3847,  1.1630,  0.1950, -1.0732, -0.7006],\n","        [-0.0829,  0.9951,  1.9928, -0.2392,  0.7990,  0.1023, -0.0996,  0.2053],\n","        [ 0.0564,  0.4274, -0.1119, -0.1431, -0.6394, -0.1241, -1.8892,  1.4530],\n","        [-0.7179, -0.2927, -0.7398, -0.8683,  0.9604,  0.3502,  0.5573,  1.0276]],\n","       grad_fn=<SliceBackward0>)\n"]}],"source":["print('Ground Truth B: \\n{}'.format(B))\n","print('OLS B0: \\n{}'.format(B0))\n","print('Trunc LDS Estimated B: \\n{}'.format(B_HAT))"]},{"cell_type":"markdown","metadata":{"id":"BMoMd2BFvd2O"},"source":["# Phase 3"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M6d90yVEva6H"},"outputs":[],"source":["# Third phase\n","\n","# Submodule to boost suevival probability\n","\n","def find_max(L, eps):\n","  # L is a list of equal-size numpy 2d arrays\n","  # We find one that is most eps-close to the others\n","  # If each of them has 2/3 prob to be eps/2 close to true value\n","  # Then that one has high prob to get eps close\n","  n = len(L)\n","  Max = -1\n","  output = None\n","  for mat in L:\n","    counter = 0\n","    for mat2 in L:\n","      if calc_spectral_norm(mat-mat2)<eps:\n","        counter += 1\n","    if counter > Max:\n","      output = mat\n","      Max = counter\n","  return output\n","\n","# I modified this to generate random bases\n","\n","def get_samples_u(eps1, eps2, hat_A, hat_B, gamma = None):\n","  '''\n","   eps_1 is the initial precision\n","   eps_2 is the final precision\n","   hat_A is the estimation of A, same as hat_B\n","   return X, U, Y, number of samples and trajectories\n","  '''\n","  n_sample = 0\n","  n_traj = 1\n","  total_samples = 0\n","  flag = True\n","  X = ch.zeros((1, D))\n","  Y = ch.zeros((1, D))\n","  U = ch.zeros((1, M))\n","  index = 0\n","  ident = ch.eye(M)\n","  # Mat, Sig, ident = LA.svd(ch.randn(D,D))\n","  curr_mat = ch.zeros([D+M,D+M])\n","\n","  xt = ch.zeros((1, D))\n","  state = \"exploit\"\n","  target = (1/(eps2*eps2)-1/(eps1*eps1))*4\n","  target_mat = ch.zeros([D+M,D+M])\n","  np.fill_diagonal(target_mat.numpy(), [0]*D+[target]*M)\n","  # We want to make the \"partial thickness\" on u to be large\n","  while True:\n","    if state == \"exploit\":\n","      ut = (gamma*ident[index])[None,...]\n","      yt = generate_trunc_lqr_data(phi, A, B, xt, ut, noise_var=NOISE_VAR)\n","      total_samples += 1\n","      if yt is not None:\n","        n_sample += 1\n","        yt, ut = yt\n","        ut = ut\n","        X = ch.cat((X,xt))\n","        Y = ch.cat((Y,yt))\n","        U = ch.cat((U,ut))\n","        xu = ch.cat((xt,ut), dim=1)\n","        state = \"resume\"\n","        # Now we consider xt and ut together\n","        curr_mat += xu.reshape(M+D,1)@xu.reshape(1,M+D)\n","        xt = yt\n","        index = (index+1)%M\n","        # if index == 0:\n","        #   Mat, Sig, ident = LA.svd(ch.randn(D,D))\n","        thickness = calc_thickness(curr_mat-target_mat)\n","        if thickness > 0:\n","          # check if the thickness is ok\n","          break\n","      else:\n","        n_traj += 1\n","        xt = ch.zeros((1, D))\n","\n","    else:\n","      ut = (-hat_B.T@LA.inv(hat_B@hat_B.T)@hat_A@xt.T).T\n","      # See paper, but don't change this.\n","      yt = generate_trunc_lqr_data(phi, A, B, xt, ut, noise_var=NOISE_VAR)\n","      total_samples += 1\n","      if yt is not None:\n","        n_sample += 1\n","        yt, ut = yt\n","        ut = ut\n","        X = ch.cat((X,xt))\n","        Y = ch.cat((Y,yt))\n","        U = ch.cat((U,ut))\n","        xu = ch.cat((xt,ut), dim=1)\n","\n","        curr_mat += xu.reshape(M+D,1)@xu.reshape(1,M+D)\n","        xt = yt\n","        thickness = calc_thickness(curr_mat-target_mat)\n","        if thickness > 0:\n","          break      \n","        if (yt*yt).sum() < 2*D:\n","          # In paper this condition is some tedious E plus 3*sqrt(d). But this works fine (and better!)\n","          state = \"exploit\"\n","        else:\n","          state = \"resume\"\n","      else:\n","        n_traj += 1\n","        state = \"exploit\"\n","        xt = ch.zeros((1, D))\n","\n","  return X[1:], U[1:], Y[1:], n_sample, n_traj, n_sample / total_samples\n","\n","def get_samples_x(eps1, eps2, hat_A, hat_B, gamma = None):\n","  '''\n","   eps1 is the initial precision\n","   eps2 is the final precision\n","   hat_A is the estimation of A, same as hat_B\n","   return X, U, Y, number of samples and trajectories\n","  '''\n","  n_sample = 0\n","  n_traj = 1\n","  total_samples = 0\n","  flag = True\n","  X = ch.zeros((1, D))\n","  Y = ch.zeros((1, D))\n","  U = ch.zeros((1, M))\n","  index = 0\n","  ident = ch.eye(D)\n","  # Mat, Sig, ident = LA.svd(ch.randn(D,D))\n","  curr_mat = ch.zeros([D+M,D+M])\n","  xt = ch.zeros((1, D))\n","  state = \"exploit\"\n","  tolerence = 0.1 # I will explain to you what this is.\n","  target = (1/(eps2*eps2)-1/(eps1*eps1))*4+tolerence\n","  target_mat = ch.zeros([D+M,D+M])\n","  np.fill_diagonal(target_mat.numpy(), [target]*D+[0]*M)\n","  # We want to make the \"partial thickness\" on x to be large\n","  while(True):\n","    if state == \"exploit\":\n","      ut = (hat_B.T@LA.inv(hat_B@hat_B.T)@ident[index]*gamma)[None,...]\n","      \n","      # See paper, but don't change this.\n","      yt = generate_trunc_lqr_data(phi, A, B, xt, ut, noise_var=NOISE_VAR)\n","      total_samples += 1\n","      if yt is not None:\n","        n_sample += 1\n","        yt, ut = yt\n","        ut = ut\n","        X = ch.cat((X,xt))\n","        Y = ch.cat((Y,yt))\n","        U = ch.cat((U,ut))\n","\n","        xu = ch.cat((xt,ut), dim=1)\n","        state = \"halt\"\n","\n","        xu_2 = xu.reshape(M+D,1)@xu.reshape(1,M+D)\n","        \n","        min_eig = calc_thickness(xu_2)\n","\n","        curr_mat += xu_2\n","\n","        xt = yt\n","        index = (index+1)%D\n","        thickness = calc_thickness(curr_mat-target_mat)\n","        if thickness > -tolerence:\n","          break\n","      else:\n","        n_traj += 1\n","        xt = ch.zeros((1, D))\n","    elif state == \"halt\":\n","      # Yes, this is for the thickness issue\n","      # Here, xt is \"orthonormal basis\" times gamma.\n","      yt = generate_trunc_lqr_data(phi, A, B, xt, ch.zeros((1, M)), noise_var=NOISE_VAR)\n","      total_samples += 1\n","      if yt is not None:\n","        n_sample += 1\n","        yt, ut = yt\n","        ut = ut\n","        X = ch.cat((X,xt))\n","        Y = ch.cat((Y,yt))\n","        U = ch.cat((U,ut))\n","        xu = ch.cat((xt,ut), dim=1)\n","\n","        state = \"resume\"\n","        curr_mat += xu.reshape(M+D,1)@xu.reshape(1,D+M)\n","        xt = yt\n","        thickness = calc_thickness(curr_mat-target_mat)\n","        # print(f'thickness: {thickness}')\n","        if thickness > -tolerence:\n","          break\n","      else:\n","        n_traj += 1\n","        state = \"exploit\"\n","        xt = ch.zeros((1, D))\n","    else:\n","      #state == \"resume\"\n","      ut = (-hat_B.T@LA.inv(hat_B@hat_B.T)@hat_A@xt.T).T\n","      yt = generate_trunc_lqr_data(phi, A, B, xt, ut, noise_var=NOISE_VAR)\n","      total_samples += 1\n","      if yt is not None:\n","        n_sample += 1\n","        yt, ut = yt\n","        ut = ut\n","        X = ch.cat((X,xt))\n","        Y = ch.cat((Y,yt))\n","        U = ch.cat((U,ut))\n","        xu = ch.cat((xt,ut), dim=1)\n","\n","        curr_mat += xu.reshape(M+D,1)@xu.reshape(1,D+M)\n","        xt = yt\n","        thickness = calc_thickness(curr_mat-target_mat)\n","        if thickness > -tolerence:\n","          break\n","        \n","        if yt.norm() < 2 * (D) ** .5:\n","          # In paper this condition is some tedious E plus 3*sqrt(d). But this works fine (and better!)\n","          state = \"exploit\"\n","        else:\n","          state = \"resume\"\n","      else:\n","        n_traj += 1\n","        state = \"exploit\"\n","        xt = ch.zeros((1, D))\n","  return X[1:], U[1:], Y[1:], n_sample, n_traj, n_sample / total_samples\n","\n","def find_estimate(eps1, eps2, hat_A, hat_B, delta, gamma_A, gamma_B):\n","  '''\n","   eps1 is the initial precision\n","   eps2 is the final precision\n","   hat_A is the estimation of A, same as hat_B\n","   delta is failing rate\n","   return new estimators hat_A and hat_B\n","  '''\n","  # Use this skeleton code to implement, thanks!\n","  repeat = int(-2*np.log2(delta))\n","  repeat = 1\n","\n","  A_buf = []\n","  B_buf = []\n","  for _ in range(repeat):\n","    Xu, Uu, Yu, Nsu, Ntu, alpha_u = get_samples_u(eps1, eps2/2, hat_A, hat_B, gamma = gamma_B)\n","    print(f'Number of Trajectories U: {Ntu}')\n","    Xx, Ux, Yx, Nsx, Ntx, alpha_x = get_samples_x(eps1, eps2/2, hat_A, hat_B, gamma = gamma_A)\n","    print(f'Number of Trajectories X: {Ntx}')\n","\n","    coef_concat = ch.cat([hat_A, hat_B], axis=1)\n","\n","    XU_concat = ch.cat([Xu, Uu], axis=1)\n","    XX_concat = ch.cat([Xx, Ux], axis=1)\n","    eigs = LA.eig(XX_concat.T@XX_concat).eigenvalues.real\n","    feat_concat = ch.cat([XU_concat, XX_concat])\n","    y_concat = ch.cat([Yu, Yx])\n","    \n","    # Plevrakis here\n","    train_kwargs = Parameters({\n","      'phi': phi, \n","      'c_gamma': 2.0,\n","      'epochs': 10, \n","      'trials': 1, \n","      'batch_size': 100,\n","      'constant': True,\n","      'verbose': True,\n","      'fit_intercept': False,\n","      'num_samples': 100,\n","      'c_s': 100, \n","      'tol': 1e-2,\n","      'n_iter_no_change': 3,\n","      'early_stopping': True,\n","      'alpha': alpha_x,\n","    })  \n","\n","    lr = (1/train_kwargs.alpha) ** train_kwargs.c_gamma\n","    train_kwargs.__setattr__('lr', lr)\n","\n","    print('phase three num samples: {}'.format(feat_concat.size(0)))\n","    trunc_lds = TruncatedLDS(train_kwargs)\n","    trunc_lds.fit(feat_concat.detach(), y_concat.detach())\n","\n","    A_, B_ = trunc_lds.A_[:,:D], trunc_lds.A_[:,D:]\n","    \n","    A_buf.append(A_)\n","    B_buf.append(B_)\n","  return find_max(A_buf,eps2), find_max(B_buf,eps2), trunc_lds.A_, trunc_lds.A_0_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1994,"status":"ok","timestamp":1666281297176,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"NXfbdLvbvanQ","outputId":"35d275a6-a53e-4314-c124-8fa3edb91d63"},"outputs":[{"output_type":"stream","name":"stdout","text":["Number of Trajectories U: 1\n","Number of Trajectories X: 35\n","phase three num samples: 1177\n","trial: 1\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 1 - Loss: -2.4371445178985596\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 2 - Loss: -2.4344565868377686\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 3 - Loss: -2.4336178302764893\n"]},{"output_type":"stream","name":"stderr","text":[]},{"output_type":"stream","name":"stdout","text":["Epoch 4 - Loss: -2.435884475708008\n","Convergence after 4 epochs took 0.67 seconds\n"]}],"source":["eps1 = 0.3\n","eps2 = 0.1\n","delta = 0.1\n","\n","gamma_B = R / U_B # for u\n","gamma_A = R / U_A # for x\n","\n","A_, B_, AB_, ols_ = find_estimate(eps1, eps2, A_HAT, B_HAT, delta, gamma_A=gamma_A, gamma_B=gamma_B)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1666281297176,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"KHBQGGz4tQTb","outputId":"ee4f5ff3-7224-446e-ee1a-0003522710ae"},"outputs":[{"output_type":"stream","name":"stdout","text":["spec norm B0: 0.10608433932065964\n","spec norm B_: 0.11616161465644836\n"]}],"source":["spec_norm_B0 = calc_spectral_norm(B0 - B)\n","print(f'spec norm B0: {spec_norm_B0}')\n","spec_norm_B_ = calc_spectral_norm(B_ - B)\n","print(f'spec norm B_: {spec_norm_B_}')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1666281297177,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"pe0OC985s-ug","outputId":"d6b7cc67-361d-40e2-944c-c8cba2233dcf"},"outputs":[{"output_type":"stream","name":"stdout","text":["spec norm A0: 0.05592221021652222\n","spec norm A_: 0.06604359298944473\n"]}],"source":["spec_norm_A0 = calc_spectral_norm(A0 - A)\n","print(f'spec norm A0: {spec_norm_A0}')\n","spec_norm_A_ = calc_spectral_norm(A_ - A)\n","print(f'spec norm A_: {spec_norm_A_}')"]},{"cell_type":"markdown","metadata":{"id":"WRajH5q_5S_X"},"source":["# Comparing Truncated LQR Performance Against OLS \n","Show how the performance of our algorithm compares with respect to OLS with varying truncation set size.\n","\n","Especially, show that OLS will give a **nonzero**-error estimate even with sufficiently large number of samples. But Plev21 (that we used) can."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TbXHZpgb2r_H"},"outputs":[],"source":["OUT_DIR = '/content/drive/MyDrive/Results/trunc_dynamic/'\n","EXP = 'test'\n","TRIALS = 5\n","TABLE_NAME = 'results'"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z0cSjuy-6NMy"},"outputs":[],"source":["# create store and add table\n","store = Store(OUT_DIR + EXP)\n","store.add_table(TABLE_NAME, { \n","  'R': float,\n","  'spec_norm_A0': float, \n","  'spec_norm_A_': float,\n","  'spec_norm_B0': float, \n","  'spec_norm_B_': float,\n","  'spec_norm_AB': float, \n","  'spec_norm_AB_ols': float,\n","})\n","\n","\n","R_ = [2.5 + 2**i for i in range(5)]\n","\n","\n","D = 5\n","M = 8\n","assert M >= D, f'M is currently: {M}, but it needs to be larger than D: {D}'\n","# I design A as a random matrix, which the eigen values at range [0.5,2]\n","fake_A = ch.randn((D, D))\n","u, s, v = LA.svd(fake_A)\n","s2 = ch.diag(ch.rand(D)*1.5+0.5)\n","A = u@s2@v\n","# I design B as a random matrix, which the eigen values also at range [0.5,2]\n","fake_B = ch.randn((D,M))\n","u, s, v = LA.svd(fake_B)\n","s2 = ch.zeros((D, M))\n","s2[:D, :D] = ch.diag(ch.rand(D)*3.5+0.5)\n","B = u@s2@v\n","U_A = 2\n","U_B = 4\n","L_B = 0.5\n","\n","for i in range(TRIALS): \n","\n","  for r in R_: \n","    R = float(r)\n","    print(f'R: {R}')\n","\n","    gamma_B = R / U_B # for u\n","    gamma_A = R / U_A # for x\n","    gamma_default_A = gamma_A\n","    gamma_default_B = gamma_B\n","\n","    # membership oracle\n","    phi = oracle.LogitBall(R)\n","\n","    A_0, A_HAT = phase_one()\n","    B_0, B_HAT = phase_two()\n","    eps1 = 0.3\n","    eps2 = 0.1\n","    delta = 0.1\n","    A_, B_, AB_, ols_  = find_estimate(eps1, eps2, A_HAT, B_HAT, delta, gamma_A=gamma_default_A, gamma_B=gamma_default_B)\n","\n","    spec_norm_B0 = calc_spectral_norm(B_0 - B)\n","    spec_norm_B_ = calc_spectral_norm(B_ - B)\n","\n","    spec_norm_A0 = calc_spectral_norm(A_0 - A)\n","    spec_norm_A_ = calc_spectral_norm(A_ - A)\n","\n","    AB = ch.cat([A, B], axis=1)\n","\n","    spec_norm_AB_ = calc_spectral_norm(AB - AB_)\n","    spec_norm_AB_ols = calc_spectral_norm(AB - ols_)\n","\n","    store[TABLE_NAME].update_row({ \n","          'R': R, \n","          'spec_norm_A0': spec_norm_A0, \n","          'spec_norm_A_': spec_norm_A_,\n","          'spec_norm_B0': spec_norm_B0, \n","          'spec_norm_B_': spec_norm_B_,\n","          'spec_norm_AB': spec_norm_AB_, \n","          'spec_norm_AB_ols': spec_norm_AB_ols,\n","    })\n","\n","    store[TABLE_NAME].flush_row()\n","\n","    IPython.display.clear_output()\n","\n","store.close()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1666283326788,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"},"user_tz":420},"id":"3eBfDJuB23fo","outputId":"2d7a8861-bf3d-4823-c567-99b16262cd19"},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 2/2 [00:00<00:00,  7.38it/s]\n"]},{"output_type":"execute_result","data":{"text/plain":["   index     R  spec_norm_A0  spec_norm_A_  spec_norm_B0  spec_norm_B_  \\\n","0      0   3.5      0.446491      0.104118      0.587357      0.174150   \n","1      1   4.5      0.237521      0.069152      0.262028      0.125701   \n","2      2   6.5      0.169963      0.042556      0.111577      0.103314   \n","3      3  10.5      0.070959      0.054584      0.107753      0.094605   \n","4      4  18.5      0.084280      0.086706      0.128480      0.140035   \n","\n","   spec_norm_AB  spec_norm_AB_ols                                exp_id  \n","0      0.194277          0.797312  783f2083-65ea-4930-80ce-fe3ef8543a6f  \n","1      0.142965          0.462640  783f2083-65ea-4930-80ce-fe3ef8543a6f  \n","2      0.105496          0.174146  783f2083-65ea-4930-80ce-fe3ef8543a6f  \n","3      0.098848          0.097788  783f2083-65ea-4930-80ce-fe3ef8543a6f  \n","4      0.149824          0.128304  783f2083-65ea-4930-80ce-fe3ef8543a6f  "],"text/html":["\n","  <div id=\"df-2491b517-f33e-4220-8665-926578f2fcc8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>R</th>\n","      <th>spec_norm_A0</th>\n","      <th>spec_norm_A_</th>\n","      <th>spec_norm_B0</th>\n","      <th>spec_norm_B_</th>\n","      <th>spec_norm_AB</th>\n","      <th>spec_norm_AB_ols</th>\n","      <th>exp_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3.5</td>\n","      <td>0.446491</td>\n","      <td>0.104118</td>\n","      <td>0.587357</td>\n","      <td>0.174150</td>\n","      <td>0.194277</td>\n","      <td>0.797312</td>\n","      <td>783f2083-65ea-4930-80ce-fe3ef8543a6f</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>4.5</td>\n","      <td>0.237521</td>\n","      <td>0.069152</td>\n","      <td>0.262028</td>\n","      <td>0.125701</td>\n","      <td>0.142965</td>\n","      <td>0.462640</td>\n","      <td>783f2083-65ea-4930-80ce-fe3ef8543a6f</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>6.5</td>\n","      <td>0.169963</td>\n","      <td>0.042556</td>\n","      <td>0.111577</td>\n","      <td>0.103314</td>\n","      <td>0.105496</td>\n","      <td>0.174146</td>\n","      <td>783f2083-65ea-4930-80ce-fe3ef8543a6f</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>10.5</td>\n","      <td>0.070959</td>\n","      <td>0.054584</td>\n","      <td>0.107753</td>\n","      <td>0.094605</td>\n","      <td>0.098848</td>\n","      <td>0.097788</td>\n","      <td>783f2083-65ea-4930-80ce-fe3ef8543a6f</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>18.5</td>\n","      <td>0.084280</td>\n","      <td>0.086706</td>\n","      <td>0.128480</td>\n","      <td>0.140035</td>\n","      <td>0.149824</td>\n","      <td>0.128304</td>\n","      <td>783f2083-65ea-4930-80ce-fe3ef8543a6f</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2491b517-f33e-4220-8665-926578f2fcc8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2491b517-f33e-4220-8665-926578f2fcc8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2491b517-f33e-4220-8665-926578f2fcc8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":47}],"source":["reader = CollectionReader(OUT_DIR + EXP)\n","logs = reader.df(TABLE_NAME).reset_index()\n","reader.close()\n","logs.head(5)"]},{"cell_type":"code","source":["mean = logs.groupby('R').mean()\n","\n","R_std_dev = np.sqrt(logs.groupby('R').var())\n","lower, upper = mean - 2*R_std_dev, mean + 2*R_std_dev"],"metadata":{"id":"7As_4fVEebpV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["colors = ['blue', 'red']\n","\n","spec_A = ['spec_norm_A_', 'spec_norm_A0']\n","\n","titles = { \n","    \n","  'spec_norm_A_': 'Our Algorithm',\n"," 'spec_norm_A0': \"OLS\"\n","\n","}\n","\n","\n","scatter = []\n","for i in enumerate(mean[spec_A].columns): \n","  scatter = scatter + measurement_scatter(mean[i[1]], upper[i[1]], lower[i[1]], titles[i[1]], color=colors[i[0]])\n","\n","\n","fig = go.Figure(scatter)\n","\n","fig.update_layout(\n","    yaxis_title='Spectral Norm Error',\n","    xaxis_title='R',\n","    hovermode=\"x\", \n","    plot_bgcolor='rgba(0, 0, 0, 0)',\n","    paper_bgcolor='rgba(0, 0, 0, 0)',\n","    font={'size': 20}\n","\n",")\n","\n","fig.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"qa3t7rPBhBqz","executionInfo":{"status":"ok","timestamp":1666283330980,"user_tz":420,"elapsed":341,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"}},"outputId":"7e618528-d84e-4bc3-85f2-fc6c024a2f6b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"1ce1812c-5737-4ad6-a218-e3d908f5c113\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"1ce1812c-5737-4ad6-a218-e3d908f5c113\")) {                    Plotly.newPlot(                        \"1ce1812c-5737-4ad6-a218-e3d908f5c113\",                        [{\"line\":{\"color\":\"blue\"},\"mode\":\"lines+markers\",\"name\":\"Mean \\nOur Algorithm\",\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.11354671865701675,0.06970129795372486,0.044020747765898705,0.04983395934104919,0.06272352188825607],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(0, 0, 255, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Upper Bound \\nOur Algorithm\",\"showlegend\":false,\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.15311234672943902,0.08910535007497147,0.055644399572553474,0.07859553241482288,0.0823260708568438],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(0, 0, 255, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Lower Bound \\nOur Algorithm\",\"showlegend\":false,\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.07398109058459447,0.050297245832478236,0.032397095959243935,0.02107238626727551,0.043120972919668335],\"type\":\"scatter\"},{\"line\":{\"color\":\"red\"},\"mode\":\"lines+markers\",\"name\":\"Mean \\nOLS\",\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.48407121896743777,0.2893804222345352,0.15560195371508598,0.09550050869584084,0.08053299598395824],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(255, 0, 0, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Upper Bound \\nOLS\",\"showlegend\":false,\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.5680316250817851,0.35995137643917235,0.20916510045775394,0.11964083025097255,0.11216856628573621],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(255, 0, 0, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Lower Bound \\nOLS\",\"showlegend\":false,\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.40011081285309047,0.21880946802989804,0.10203880697241802,0.07136018714070913,0.048897425682180286],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"font\":{\"size\":20},\"yaxis\":{\"title\":{\"text\":\"Spectral Norm Error\"}},\"xaxis\":{\"title\":{\"text\":\"R\"}},\"hovermode\":\"x\",\"plot_bgcolor\":\"rgba(0, 0, 0, 0)\",\"paper_bgcolor\":\"rgba(0, 0, 0, 0)\"},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('1ce1812c-5737-4ad6-a218-e3d908f5c113');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"code","source":["colors = ['blue', 'red']\n","\n","spec_B = ['spec_norm_B_', 'spec_norm_B0']\n","\n","titles = { \n","    \n","  'spec_norm_B_': 'Our Algorithm',\n"," 'spec_norm_B0': \"OLS\"\n","\n","}\n","\n","scatter = []\n","for i in enumerate(mean[spec_B].columns): \n","  scatter = scatter + measurement_scatter(mean[spec_B[i[0]]], \n","                                          upper[spec_B[i[0]]], \n","                                          lower[spec_B[i[0]]], \n","                                          titles[i[1]], \n","                                          color=colors[i[0]])\n","\n","fig = go.Figure(scatter)\n","\n","fig.update_layout(\n","    yaxis_title='Spectral Norm Error',\n","    xaxis_title='R',\n","    hovermode=\"x\",\n","    plot_bgcolor='rgba(0, 0, 0, 0)',\n","    paper_bgcolor='rgba(0, 0, 0, 0)',\n","    font={'size': 20}\n",")\n","fig.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"9vNKLx_biSOu","executionInfo":{"status":"ok","timestamp":1666283334272,"user_tz":420,"elapsed":156,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"}},"outputId":"971ca375-ca87-404b-9291-e3eb64b9e2fe"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"24348eb1-4273-4365-9cd3-f2d6d311da9e\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"24348eb1-4273-4365-9cd3-f2d6d311da9e\")) {                    Plotly.newPlot(                        \"24348eb1-4273-4365-9cd3-f2d6d311da9e\",                        [{\"line\":{\"color\":\"blue\"},\"mode\":\"lines+markers\",\"name\":\"Mean \\nOur Algorithm\",\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.16601134836673737,0.1341998264193535,0.11102316603064537,0.10144418179988861,0.10521258190274238],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(0, 0, 255, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Upper Bound \\nOur Algorithm\",\"showlegend\":false,\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.2013773303391991,0.18155163190326085,0.15552652034861258,0.14508101561959535,0.14371523934155644],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(0, 0, 255, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Lower Bound \\nOur Algorithm\",\"showlegend\":false,\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.13064536639427562,0.08684802093544614,0.06651981171267816,0.05780734798018186,0.0667099244639283],\"type\":\"scatter\"},{\"line\":{\"color\":\"red\"},\"mode\":\"lines+markers\",\"name\":\"Mean \\nOLS\",\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.5203819692134857,0.21723252534866333,0.14694863110780715,0.15817200914025306,0.14462333545088768],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(255, 0, 0, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Upper Bound \\nOLS\",\"showlegend\":false,\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.6811367341895194,0.27633848410610584,0.19329087534936204,0.215662636867513,0.17595446347276336],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(255, 0, 0, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Lower Bound \\nOLS\",\"showlegend\":false,\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.359627204237452,0.15812656659122085,0.10060638686625226,0.10068138141299313,0.113292207429012],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"font\":{\"size\":20},\"yaxis\":{\"title\":{\"text\":\"Spectral Norm Error\"}},\"xaxis\":{\"title\":{\"text\":\"R\"}},\"hovermode\":\"x\",\"plot_bgcolor\":\"rgba(0, 0, 0, 0)\",\"paper_bgcolor\":\"rgba(0, 0, 0, 0)\"},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('24348eb1-4273-4365-9cd3-f2d6d311da9e');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"code","source":["colors = ['blue', 'red']\n","\n","spec_ = ['spec_norm_AB', 'spec_norm_AB_ols']\n","\n","titles = { \n","    \n","  'spec_norm_AB': 'Our Algorithm',\n"," 'spec_norm_AB_ols': \"OLS\"\n","\n","}\n","\n","scatter = []\n","for i in enumerate(mean[spec_].columns): \n","  scatter = scatter + measurement_scatter(mean[spec_[i[0]]], \n","                                          upper[spec_[i[0]]], \n","                                          lower[spec_[i[0]]], \n","                                          titles[i[1]], \n","                                          color=colors[i[0]])\n","\n","fig = go.Figure(scatter)\n","\n","fig.update_layout(\n","    yaxis_title='$||AB^{*} - \\hat{AB}||$',\n","    xaxis_title='R',\n","    hovermode=\"x\",\n","    plot_bgcolor='rgba(0, 0, 0, 0)',\n","    paper_bgcolor='rgba(0, 0, 0, 0)',\n","    font={'size': 20}\n",")\n","fig.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"ISPPbadlAaYw","executionInfo":{"status":"ok","timestamp":1666283351351,"user_tz":420,"elapsed":203,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"}},"outputId":"9febd1f9-f58c-4eff-b28f-ed2cd43a05cb"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"fe94430f-1a23-4f38-9660-ba8a1c8b671c\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"fe94430f-1a23-4f38-9660-ba8a1c8b671c\")) {                    Plotly.newPlot(                        \"fe94430f-1a23-4f38-9660-ba8a1c8b671c\",                        [{\"line\":{\"color\":\"blue\"},\"mode\":\"lines+markers\",\"name\":\"Mean \\nOur Algorithm\",\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.19500672519207002,0.1450382761657238,0.11519499644637107,0.10667175352573395,0.1162136249244213],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(0, 0, 255, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Upper Bound \\nOur Algorithm\",\"showlegend\":false,\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.2296838031578743,0.1909443225507293,0.1601596580447887,0.15128924930116572,0.1520643371424154],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(0, 0, 255, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Lower Bound \\nOur Algorithm\",\"showlegend\":false,\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.16032964722626575,0.09913222978071828,0.07023033484795345,0.06205425775030219,0.0803629127064272],\"type\":\"scatter\"},{\"line\":{\"color\":\"red\"},\"mode\":\"lines+markers\",\"name\":\"Mean \\nOLS\",\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.733917111158371,0.43003142178058623,0.15613438338041305,0.10616667866706848,0.11054640114307404],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(255, 0, 0, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Upper Bound \\nOLS\",\"showlegend\":false,\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.8825476534301226,0.5220869198886048,0.18826395215196767,0.14452116119162758,0.14369879379610978],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(255, 0, 0, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Lower Bound \\nOLS\",\"showlegend\":false,\"x\":[3.5,4.5,6.5,10.5,18.5],\"y\":[0.5852865688866193,0.3379759236725677,0.12400481460885843,0.06781219614250938,0.07739400849003832],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"font\":{\"size\":20},\"yaxis\":{\"title\":{\"text\":\"$||AB^{*} - \\\\hat{AB}||$\"}},\"xaxis\":{\"title\":{\"text\":\"R\"}},\"hovermode\":\"x\",\"plot_bgcolor\":\"rgba(0, 0, 0, 0)\",\"paper_bgcolor\":\"rgba(0, 0, 0, 0)\"},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('fe94430f-1a23-4f38-9660-ba8a1c8b671c');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"wQ4jld4U6bDG"},"source":["# Comparing Truncated Algorithm against OLS by Varying the Number of Trajectories Given\n","We vary the number fo trajectories that OLS and our algorithm have access to and compare how each algorithm performs when trying to recover both $A^{*}$ and $B^{*}$."]},{"cell_type":"code","source":["# First phase\n","# Although the data need me to throw away some data with small survival probability, I am not wanting to throw away them in practice.\n","\n","NOISE_VAR = ch.Tensor([1.0])\n","def phase_one(num_traj=float('inf')):\n","  num_samples = 0\n","  num_trajectories = 1\n","  total_samples = 0\n","  target_thick = 2*U_A*U_A*max(U_A,U_B)/L_B\n","  x_t = ch.zeros((1, D))\n","  X, Y, U = ch.Tensor([]), ch.Tensor([]), ch.Tensor([])\n","  covariate_matrix = ch.zeros([D,D])\n","\n","  # The following data does NOT throw away data.\n","  '''\n","  The algorithm to get the samples are similar in three phases\n","  It may NOT directly follow the paper, some params are tuned\n","  I will notice those places if I remember\n","  '''\n","\n","  while True:\n","    samples = generate_trunc_lqr_data(phi, A, B, x_t, u_t=ch.zeros((1, M)), noise_var=NOISE_VAR)\n","    total_samples += 1\n","    if samples is not None:\n","      y_t, u_t = samples\n","      X, Y, U = ch.cat((X,x_t)), ch.cat((Y,y_t)), ch.cat((U, u_t))\n","      # Get one sample, update and calculate the thickness\n","      covariate_matrix += x_t.T@x_t\n","      x_t = y_t\n","      num_samples += 1\n","      \"\"\"\n","      terminate the data generation, when the covariate vectors \n","      have enough thickness\n","      \"\"\"\n","      thickness = calc_thickness(covariate_matrix)\n","      # print(f'current thickness: {thickness}')\n","      if thickness > target_thick:\n","        # Remember! the ONLY and the most convenient way to judge\n","        # whether we have collected enough samples\n","        # is to check whether we have enough thickness.\n","        break\n","    else:\n","      # It fails! A trajectory fails iff yt is None\n","      x_t = ch.zeros((1, D))\n","      num_trajectories += 1\n","\n","    if total_samples % 1000 == 0: \n","      print(f'total number of samples: {total_samples}')\n","\n","  alpha = num_samples / total_samples\n","\n","  #You can un-comment to run the following code, it throws away some data\n","  X_1, Y_1 = X.clone(), Y.clone()\n","  train_kwargs = Parameters({\n","      'phi': phi, \n","      'c_gamma': 2.0,\n","      'epochs': 10, \n","      'trials': 1, \n","      'batch_size': 100,\n","      'constant': True,\n","      'verbose': True,\n","      'fit_intercept': False,\n","      'num_samples': 100,\n","      'c_s': 100, \n","      'tol': 1e-2,\n","      'alpha': alpha, \n","      'n_iter_no_change': 3,\n","      'early_stopping': True,\n","  })\n","\n","  lr = (1/train_kwargs.alpha) ** train_kwargs.c_gamma\n","  train_kwargs.__setattr__('lr', lr)\n","\n","  print('phase one num samples: {}'.format(X_1.size(0)))\n","  trunc_lds = TruncatedLDS(train_kwargs)\n","  trunc_lds.fit(X_1, Y_1)\n","\n","  return trunc_lds.A_0_, trunc_lds.A_, num_trajectories"],"metadata":{"id":"hIBqVW1C_gKx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def phase_two(num_traj=float('inf')): \n","  # Second phase\n","  num_samples = 0\n","  num_trajectories = 1\n","  target_thick = 2*U_A*U_A*max(U_A,U_B)/L_B\n","  # This can be tuned\n","  # This one I can't remember the number, but just like that is ok\n","  index = 0\n","  xt = ch.zeros((1, D))\n","  mat = ch.randn((M,M))\n","  matrix, sig, ident = LA.svd(mat)\n","  # ident = ch.eye(M)\n","  # This is the orthogonal basis.\n","  U, Y = ch.Tensor([]), ch.Tensor([])\n","  curr_mat = ch.zeros([M,M])\n","  gamma = R/U_B\n","  # You could tune this. I changed the value from paper.\n","\n","  while True:\n","    # Remember this phase is 1 trajectory 1 sample\n","    u = gamma*ident[index][None,...]\n","    y = generate_trunc_lqr_data(phi, ch.zeros(D, D), B, xt, u_t=u, noise_var=NOISE_VAR)\n","\n","    num_trajectories += 1\n","    if y is not None:\n","      y, u = y\n","      num_samples += 1\n","      index = (index+1)%M\n","      # Remember to modulo m!\n","      U = ch.cat([U, u])\n","      Y = ch.cat([Y, y])\n","      curr_mat += u.T@u\n","      thickness = calc_thickness(curr_mat)\n","      if thickness > target_thick:\n","        break\n","      if index == 0:\n","        mat = ch.randn((M,M))\n","        matrix, sig, ident = LA.svd(mat)\n","  alpha = num_samples / num_trajectories\n","  U_2, Y_2 = U.clone(), Y.clone()\n","\n","  # num_samples is the row shape of U\n","\n","  num_samples, num_trajectories\n","\n","  train_kwargs = Parameters({\n","      'phi': phi, \n","      'c_gamma': 2.0,\n","      'epochs': 10, \n","      'trials': 1, \n","      'batch_size': 100,\n","      'constant': True,\n","      'verbose': True,\n","      'fit_intercept': False,\n","      'num_samples': 100,\n","      'c_s': 100, \n","      'tol': 1e-2,\n","      'n_iter_no_change': 2,\n","      'early_stopping': True,\n","      'alpha': alpha, \n","  })\n","\n","  \n","  lr = (1/train_kwargs.alpha) ** train_kwargs.c_gamma\n","  train_kwargs.__setattr__('lr', lr)\n","\n","  trunc_lds = TruncatedLDS(train_kwargs)\n","  trunc_lds.fit(U_2, Y_2)\n","\n","  print('phase two num samples: {num_trajectories}')\n","\n","  return trunc_lds.A_0_, trunc_lds.A_, num_trajectories"],"metadata":{"id":"d075a6yk_m91"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Third phase\n","\n","# Submodule to boost suevival probability\n","\n","def find_max(L, eps):\n","  # L is a list of equal-size numpy 2d arrays\n","  # We find one that is most eps-close to the others\n","  # If each of them has 2/3 prob to be eps/2 close to true value\n","  # Then that one has high prob to get eps close\n","  n = len(L)\n","  Max = -1\n","  output = None\n","  for mat in L:\n","    counter = 0\n","    for mat2 in L:\n","      if calc_spectral_norm(mat-mat2)<eps:\n","        counter += 1\n","    if counter > Max:\n","      output = mat\n","      Max = counter\n","  return output\n","\n","def get_samples_u(eps1, eps2, hat_A, hat_B, num_traj, gamma = None, random=False):\n","  '''\n","   eps_1 is the initial precision\n","   eps_2 is the final precision\n","   hat_A is the estimation of A, same as hat_B\n","   return X, U, Y, number of samples and trajectories\n","  '''\n","  n_sample = 0\n","  n_traj = 1\n","  total_samples = 0\n","  flag = True\n","  X, Y, U = ch.Tensor([]), ch.Tensor([]), ch.Tensor([])\n","  index = 0\n","  ident = ch.eye(M)\n","  curr_mat = ch.zeros([D+M,D+M])\n","  xt = ch.zeros((1, D))\n","  state = \"exploit\"\n","  tolarent = 0.1\n","  target = (1/(eps2*eps2)-1/(eps1*eps1))+tolarent\n","  target_mat = ch.zeros([D+M,D+M])\n","  np.fill_diagonal(target_mat.numpy(), [0]*D+[target]*M)\n","  count = 0\n","  # We want to make the \"partial thickness\" on u to be large\n","  while n_traj <= num_traj:\n","    ut = None\n","    if state == \"exploit\":\n","      ut = (gamma*ident[index])[None,...]\n","      yt = generate_trunc_lqr_data(phi, A, B, xt, u_t=ut, noise_var=NOISE_VAR)\n","      total_samples += 1\n","      if yt is not None:\n","        n_sample += 1\n","        yt, ut = yt\n","        X = ch.cat((X,xt))\n","        Y = ch.cat((Y,yt))\n","        U = ch.cat((U,ut))\n","        xu = ch.cat((xt,ut), dim=1)\n","        state = \"resume\"\n","        # Now we consider xt and ut together\n","        curr_mat += xu.reshape(M+D,1)@xu.reshape(1,M+D)\n","        xt = yt\n","        index = (index+1)%M\n","        thickness = calc_thickness(curr_mat-target_mat)\n","        if thickness > -tolarent and U.size(0) > U.size(1):\n","          break\n","      else:\n","        n_traj += 1\n","        xt = ch.zeros((1, D))\n","\n","    else:\n","      # See paper, but don't change this. \n","      ut = (-hat_B.T@LA.inv(hat_B@hat_B.T)@hat_A@xt.T).T\n","      yt = generate_trunc_lqr_data(phi, A, B, xt, u_t=ut, noise_var=NOISE_VAR)\n","      total_samples += 1\n","      if yt is not None:\n","        n_sample += 1\n","        yt, ut = yt\n","        X = ch.cat((X,xt))\n","        Y = ch.cat((Y,yt))\n","        U = ch.cat((U,ut))\n","        xu = ch.cat((xt,ut), dim=1)\n","\n","        curr_mat += xu.reshape(M+D,1)@xu.reshape(1,M+D)\n","        xt = yt      \n","        thickness = calc_thickness(curr_mat-target_mat)\n","        if thickness > -tolarent and U.size(0) > U.size(1):\n","          break\n","        if (yt*yt).sum() < 2*D:\n","          # In paper this condition is some tedious E plus 3*sqrt(d). But this works fine (and better!)\n","          state = \"exploit\"\n","        else:\n","          state = \"resume\"\n","      else:\n","        n_traj += 1\n","        state = \"exploit\"\n","        xt = ch.zeros((1, D))\n","    count +=1 \n","  return X, U, Y, n_sample, n_traj, n_sample / (total_samples + 1e-2)\n","\n","def get_samples_x(eps1, eps2, hat_A, hat_B, num_traj, gamma = None, random=False):\n","  '''\n","   eps1 is the initial precision\n","   eps2 is the final precision\n","   hat_A is the estimation of A, same as hat_B\n","   return X, U, Y, number of samples and trajectories\n","  '''\n","  n_sample = 0\n","  n_traj = 1\n","  total_samples = 0\n","  flag = True\n","  X, Y, U = ch.Tensor([]), ch.Tensor([]), ch.Tensor([])\n","  index = 0\n","  ident = ch.eye(D)\n","  curr_mat = ch.zeros([D+M,D+M])\n","  xt = ch.zeros((1, D))\n","  state = \"exploit\"\n","  tolerence = 0.1 # I will explain to you what this is.\n","  target = (1/(eps2*eps2)-1/(eps1*eps1))*4+tolerence\n","  target_mat = ch.zeros([D+M,D+M])\n","  np.fill_diagonal(target_mat.numpy(), [target]*D+[0]*M)\n","  # We want to make the \"partial thickness\" on x to be large\n","\n","  while n_traj <= num_traj:\n","    total_samples += 1\n","    ut = None\n","    if state == \"exploit\":\n","      ut = (hat_B.T@LA.inv(hat_B@hat_B.T)@ident[index]*gamma)[None,...]\n","      # See paper, but don't change this.\n","      yt = generate_trunc_lqr_data(phi, A, B, xt, u_t=ut, noise_var=NOISE_VAR)\n","      if yt is not None:\n","        n_sample += 1\n","        yt, ut = yt\n","        X = ch.cat((X,xt))\n","        Y = ch.cat((Y,yt))\n","        U = ch.cat((U,ut))\n","\n","        xu = ch.cat((xt,ut), dim=1)\n","        state = \"halt\"\n","\n","        xu_2 = xu.reshape(M+D,1)@xu.reshape(1,M+D)\n","        curr_mat += xu_2\n","\n","        xt = yt\n","        index = (index+1)%D\n","        thickness = calc_thickness(curr_mat-target_mat)\n","        if thickness > -tolerence and U.size(0) > U.size(1):\n","          break\n","      else:\n","        n_traj += 1\n","        xt = ch.zeros((1, D))\n","    elif state == \"halt\":\n","      # Yes, this is for the thickness issue\n","      # Here, xt is \"orthonormal basis\" times gamma.\n","      ut = ch.zeros((1, M))\n","      yt = generate_trunc_lqr_data(phi, A, B, xt, u_t=ut, noise_var=NOISE_VAR)\n","      total_samples += 1\n","      if yt is not None:\n","        n_sample += 1\n","        yt, ut = yt\n","        ut = ut\n","        X = ch.cat((X,xt))\n","        Y = ch.cat((Y,yt))\n","        U = ch.cat((U,ut))\n","        xu = ch.cat((xt,ut), dim=1)\n","\n","        state = \"resume\"\n","        curr_mat += xu.reshape(M+D,1)@xu.reshape(1,D+M)\n","        xt = yt\n","        thickness = calc_thickness(curr_mat-target_mat)\n","        if thickness > -tolerence and U.size(0) > U.size(1):\n","          break\n","      else:\n","        n_traj += 1\n","        state = \"exploit\"\n","        xt = ch.zeros((1, D))\n","    else:\n","      ut = (-hat_B.T@LA.inv(hat_B@hat_B.T)@hat_A@xt.T).T\n","      yt = generate_trunc_lqr_data(phi, A, B, xt, u_t=ut, noise_var=NOISE_VAR)\n","      total_samples += 1\n","      if yt is not None:\n","        n_sample += 1\n","        yt, ut = yt\n","        ut = ut\n","        X = ch.cat((X,xt))\n","        Y = ch.cat((Y,yt))\n","        U = ch.cat((U,ut))\n","        xu = ch.cat((xt,ut), dim=1)\n","\n","        curr_mat += xu.reshape(M+D,1)@xu.reshape(1,D+M)\n","        xt = yt\n","        \n","        if yt.norm() < 2 * (D) ** .5:\n","          # In paper this condition is some tedious E plus 3*sqrt(d). But this works fine (and better!)\n","          state = \"exploit\"\n","        else:\n","          state = \"resume\"\n","        thickness = calc_thickness(curr_mat-target_mat)\n","        if thickness > -tolerence and U.size(0) > U.size(1):\n","          break\n","      else:\n","        n_traj += 1\n","        state = \"exploit\"\n","        xt = ch.zeros((1, D))\n","  alpha = n_sample / (total_samples + 1e-2)\n","  # if alpha == 0: \n","  #   print(f'alpha: {alpha}')\n","  #   print(f'n sample: {n_sample}')\n","  #   print(f'total samples: {total_samples}')\n","  #   import pdb; pdb.set_trace()\n","  print(f'alpha: {alpha}')\n","  return X, U, Y, n_sample, n_traj, alpha\n","\n","def find_estimate(eps1, eps2, hat_A, hat_B, delta, gamma_A, gamma_B, num_traj=float('inf'), random=False):\n","  '''\n","   eps1 is the initial precision\n","   eps2 is the final precision\n","   hat_A is the estimation of A, same as hat_B\n","   delta is failing rate\n","   return new estimators hat_A and hat_B\n","  '''\n","  # Use this skeleton code to implement, thanks!\n","  repeat = int(-2*np.log2(delta))\n","  repeat = 1\n","\n","  A_buf = []\n","  B_buf = []\n","\n","  if num_traj==float('inf'):\n","    traj_A = traj_B = num_traj=float('inf')\n","  else:\n","    average_thick_A = gamma_A*gamma_A/D\n","    average_thick_B = gamma_B*gamma_B/M\n","    traj_A = int(num_traj * average_thick_B / (average_thick_A+average_thick_B))\n","    traj_B = num_traj - traj_A\n","  for _ in range(repeat):\n","    Xu, Uu, Yu, Nsu, Ntu, alpha_u = get_samples_u(eps1, \n","                                                  eps2/2, \n","                                                  hat_A, \n","                                                  hat_B, \n","                                                  traj_B, \n","                                                  gamma = gamma_B, \n","                                                  random=random)\n","    \n","\n","    print(f'Number of Trajectories U: {Ntu}')\n","    Xx, Ux, Yx, Nsx, Ntx, alpha_x = get_samples_x(eps1, \n","                                                  eps2/2, \n","                                                  hat_A, \n","                                                  hat_B, \n","                                                  traj_A, \n","                                                  gamma = gamma_A, \n","                                                  random=random)\n","    \n","    if alpha_x == 0: \n","      break\n","    print(f'Number of Trajectories X: {Ntx}')\n","    total_traj = Ntu + Ntx\n","\n","    coef_concat = ch.cat([hat_A, hat_B], axis=1)\n","\n","    XU_concat = ch.cat([Xu, Uu], axis=1)\n","    XX_concat = ch.cat([Xx, Ux], axis=1)\n","    # eigs = LA.eig(XX_concat.T@XX_concat).eigenvalues.real\n","    feat_concat = ch.cat([XU_concat, XX_concat])\n","    y_concat = ch.cat([Yu, Yx])\n","    \n","    print('alpha x: {}'.format(alpha_x))\n","\n","    if feat_concat.size(0) > feat_concat.size(1): \n","      # Plevrakis here\n","      train_kwargs = Parameters({\n","        'phi': phi, \n","        'c_gamma': 2.0,\n","        'epochs': 10, \n","        'trials': 1, \n","        'batch_size': 100,\n","        'constant': True,\n","        'verbose': True,\n","        'fit_intercept': False,\n","        'num_samples': 100,\n","        'c_s': 100, \n","        'tol': 1e-2,\n","        'n_iter_no_change': 3,\n","        'early_stopping': True,\n","        'alpha': alpha_x,\n","      })  \n","\n","      diag = ch.cat([ch.full((D,), 1/(eps1**2)), ch.full((M,), 1/(eps1**2))])\n","      Sigma = ch.diag(diag)\n","\n","      # run the non Sarah Dean setting\n","      if not random: train_kwargs.__setattr__('A_0', coef_concat)\n","    \n","      train_kwargs.__setattr__('Sigma_0', Sigma)\n","\n","      if train_kwargs.alpha == 0.0:\n","        lr = 10.0\n","      else: \n","        lr = (1/train_kwargs.alpha) ** train_kwargs.c_gamma\n","      train_kwargs.__setattr__('lr', lr)\n","\n","      print('phase three num samples: {}'.format(feat_concat.size(0)))\n","      trunc_lds = TruncatedLDS(train_kwargs)\n","      trunc_lds.fit(feat_concat.detach(), y_concat.detach())\n","\n","      A_, B_ = trunc_lds.A_[:,:D], trunc_lds.A_[:,D:]\n","      \n","      A_buf.append(A_)\n","      B_buf.append(B_)\n","      ols = LinearRegression(fit_intercept=False).fit(feat_concat.detach().numpy(), \n","                                                      y_concat.detach().numpy())\n","\n","      return find_max(A_buf,eps2), find_max(B_buf,eps2), XX_concat, y_concat, XU_concat, total_traj, ols, feat_concat\n","    return None\n","\n","def calc_stepwise_ols(eps1, eps2, hat_A, hat_B, delta, gamma_A, gamma_B, num_traj=float('inf')): \n","      \n","    Xu, Uu, Yu, Nsu, Ntu, alpha_u = get_samples_u(eps1, \n","                                                  eps2/2, \n","                                                  hat_A, \n","                                                  hat_B, \n","                                                  (num_traj + 1) // 2, \n","                                                  gamma = gamma_B)\n","    \n","\n","    print(f'Number of Trajectories U: {Ntu}')\n","    print(f'Number of Samples U: {Nsu}')\n","    Xx, Ux, Yx, Nsx, Ntx, alpha_x = get_samples_x(eps1, \n","                                                  eps2/2, \n","                                                  hat_A, \n","                                                  hat_B, \n","                                                  num_traj // 2, \n","                                                  gamma = gamma_A)\n","    print(f'Number of Trajectories X: {Ntx}')\n","    print(f'Number of Samples X: {Nsx}')\n","    total_traj = Ntu + Ntx\n","\n","    coef_concat = ch.cat([hat_A, hat_B], axis=1)\n","\n","    with ch.no_grad():\n","      XU_concat = ch.cat([Xu, Uu], axis=1)\n","      XX_concat = ch.cat([Xx, Ux], axis=1)\n","      # eigs = LA.eig(XX_concat.T@XX_concat).eigenvalues.real\n","      feat_concat = ch.cat([XU_concat, XX_concat])\n","      y_concat = ch.cat([Yu, Yx])\n","\n","    return feat_concat, y_concat, total_traj, LinearRegression(fit_intercept=False).fit(feat_concat, y_concat)"],"metadata":{"id":"S6QCTrJaivZe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def calc_sarah_dean(num_traj): \n","\n","  number_trajectories = 1\n","  num_samples = 0\n","  xt = ch.zeros((1, A.size(0)))  # initialize x_t\n","\n","\n","  X, Y, U = ch.Tensor([]), ch.Tensor([]), ch.Tensor([])\n","  # generate the data\n","  while number_trajectories < num_traj:\n","    number_trajectories += 1\n","    yt = generate_trunc_lqr_data(phi, A, B, xt) \n","\n","    if yt is not None: \n","      yt, ut = yt \n","      X = ch.cat((X,xt))\n","      Y = ch.cat((Y,yt))\n","      U = ch.cat((U,ut))\n","\n","      xt = yt \n","      num_samples += 1\n","    else: \n","      xt = ch.zeros((1, A.size(0)))\n","\n","\n","  feat_concat = ch.cat([X, U], axis=1)\n","\n","  train_kwargs = Parameters({\n","    'phi': phi, \n","    'c_gamma': 2.0,\n","    'epochs': 10, \n","    'trials': 1, \n","    'batch_size': 100,\n","    'constant': True,\n","    'verbose': True,\n","    'fit_intercept': False,\n","    'num_samples': 100,\n","    'c_s': 100, \n","    'tol': 1e-2,\n","    'n_iter_no_change': 3,\n","    'early_stopping': True,\n","    'alpha': num_samples / (num_samples + number_trajectories),\n","  })  \n","\n","\n","  lr = (1/train_kwargs.alpha) ** train_kwargs.c_gamma\n","  train_kwargs.__setattr__('lr', lr)\n","\n","  # diag = ch.cat([ch.full((D,), 1/(U_A**2)), ch.full((M,), 1/(U_B**2))])\n","  # Sigma = ch.diag(diag)\n","  # train_kwargs.__setattr__('Sigma_0', Sigma)\n","\n","  trunc_lds = TruncatedLDS(train_kwargs)\n","  trunc_lds.fit(feat_concat.detach(), Y.detach())\n","\n","  A_, B_ = trunc_lds.A_[:,:D], trunc_lds.A_[:,D:]\n","\n","  ols_ = trunc_lds.emp_coef_\n","  A_ols, B_ols = ols_[:,:D], ols_[:,D:]\n","\n","  return A_, B_, A_ols, B_ols"],"metadata":{"id":"OYIVW1Vn_tnt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["OUT_DIR = '/content/drive/MyDrive/Results/traj/'\n","EXP = 'traj_'\n","TRIALS = 5\n","TABLE_NAME = 'results'"],"metadata":{"id":"t-IGjwjlbohR"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-zNHftcR6ulj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666289941586,"user_tz":420,"elapsed":955913,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"}},"outputId":"5bdb291b-4546-4892-8905-78d382778013"},"outputs":[{"output_type":"stream","name":"stdout","text":["EXP ID: 1435a4c7-f7a8-4df9-9975-a4fea91387ce\n"]}],"source":["# create store and add table\n","store = Store(OUT_DIR + EXP)\n","store.add_table(TABLE_NAME, { \n","  'R': float,\n","  'spec_norm_A_HAT': float,\n","  'spec_norm_B_HAT': float,\n","  'spec_norm_A_ols': float, \n","  'spec_norm_A_': float,\n","  'spec_norm_B_ols': float, \n","  'spec_norm_B_': float,\n","  'sarah_spec_A': float, \n","  'sarah_spec_B': float,\n","  'sarah_spec_ols_A': float, \n","  'sarah_spec_ols_B': float,\n","  'spec_norm_A_total_ols': float, \n","  'spec_norm_B_total_ols': float,\n","  'num_traj': int,\n","  'epoch': int,\n","})\n","\n","NUM_TRAJ = [200+100*i for i in range(10)]\n","\n","R = 6\n","\n","D = 5\n","M = 8\n","assert M >= D, f'M is currently: {M}, but it needs to be larger than D: {D}'\n","# I design A as a random matrix, which the eigen values at range [0.5,2]\n","fake_A = ch.randn((D, D))\n","u, s, v = LA.svd(fake_A)\n","s2 = ch.diag(ch.rand(D)*1.5+0.5)\n","A = u@s2@v\n","# I design B as a random matrix, which the eigen values also at range [0.5,2]\n","fake_B = ch.randn((D,M))\n","u, s, v = LA.svd(fake_B)\n","s2 = ch.zeros((D, M))\n","s2[:D, :D] = ch.diag(ch.rand(D)*2.5+0.5)\n","B = u@s2@v\n","U_A = 2\n","U_B = 3\n","L_B = 0.5\n","gamma_B = (R / U_B) * .8 # for u\n","gamma_A = (R / U_A) * .8 # for x\n","gamma_default_A = gamma_A\n","gamma_default_B = gamma_B\n","\n","# membership oracle\n","phi = oracle.LogitBall(R)\n","\n","for i in range(TRIALS): \n","\n","  for num_ in NUM_TRAJ: \n","    print(f'number of trajectories: {num_}')\n","    epoch = 0\n","    A_0, A_HAT, traj_one = phase_one(num_)\n","    print(f'traj one: {traj_one}')\n","    B_0, B_HAT, traj_two = phase_two(num_)\n","    print(f'traj two: {traj_two}')\n","    A_hat_clone = A_HAT.clone()\n","    B_hat_clone = B_HAT.clone()\n","    init_A = A_HAT.clone()\n","    init_B = B_HAT.clone()\n","    eps1 = (1/max(U_A,U_B)/2)\n","    eps2 = eps1/2\n","    delta = 0.1\n","    avail_traj_our = num_ - traj_one - traj_two\n","    avail_traj_ols = num_ - traj_one - traj_two\n","    X_tot, Y_tot, U_tot = ch.Tensor([]), ch.Tensor([]), ch.Tensor([])\n","    feat_tot = ch.Tensor([])\n","    X_tot_ols, Y_tot_ols, U_tot_ols = ch.Tensor([]), ch.Tensor([]), ch.Tensor([])\n","    print(f\"Initial error of A is {calc_spectral_norm(A_HAT - A)}\")\n","    print(f\"And initial error of B is {calc_spectral_norm(B_HAT - B)}\")\n","    # We first do our case\n","    while(avail_traj_our>0):\n","      print(avail_traj_our)\n","      result = find_estimate(eps1, eps2, A_HAT, B_HAT, delta, gamma_default_A, \n","                                  gamma_default_B, avail_traj_our)\n","      \n","      if result is not None:\n","        A_, B_, X, Y, U, trajs, ols, feat_concat = result        \n","        A_HAT = A_.clone()\n","        B_HAT = B_.clone()\n","        X_tot = ch.cat((X_tot,X))\n","        Y_tot = ch.cat((Y_tot,Y))\n","        U_tot = ch.cat((U_tot,U))\n","        feat_tot = ch.cat((feat_tot, feat_concat))\n","        avail_traj_our -= trajs\n","        eps1 = eps1/2\n","        eps2 = eps2/2\n","        epoch  += 1\n","        print(f\"Epoch {epoch} and current error for A is {calc_spectral_norm(A_HAT - A)}, current error of B is {calc_spectral_norm(B_HAT - B)}\")\n","    \n","    eps1 = (1/max(U_A,U_B)/2)\n","    eps2 = eps1/2\n","    # Then do stepwise OLS\n","    A_HAT = A_hat_clone\n","    B_HAT = B_hat_clone\n","    while(avail_traj_ols>0):\n","\n","      X, Y, trajs, ols = calc_stepwise_ols(eps1, eps2, A_HAT, B_HAT, delta, gamma_default_A, \n","                                  gamma_default_B, avail_traj_ols)\n","\n","      A_ols, B_ols = ch.from_numpy(ols.coef_[:,:D]), ch.from_numpy(ols.coef_[:,D:])\n","      A_HAT = A_ols.clone()\n","      B_HAT = B_ols.clone()\n","      avail_traj_ols -= trajs\n","      eps1 = eps1/2\n","      eps2 = eps2/2\n","\n","    # Then, do a OVERALL ols on X_tot,Y_tot,U_tot\n","    overall_ols = LinearRegression(fit_intercept=False).fit(feat_tot.detach().numpy(), Y_tot.detach().numpy())\n","    A_total_ols, B_total_ols = ch.from_numpy(overall_ols.coef_[:,:D]), ch.from_numpy(overall_ols.coef_[:,D:])\n","\n","    spec_norm_B_HAT = calc_spectral_norm(init_B - B)\n","    spec_norm_A_HAT = calc_spectral_norm(init_A - A)\n","\n","    spec_norm_B_ols = calc_spectral_norm(B_ols - B)\n","    spec_norm_B_ = calc_spectral_norm(B_ - B)\n","\n","    spec_norm_A_ols = calc_spectral_norm(A_ols - A)\n","    spec_norm_A_ = calc_spectral_norm(A_ - A)\n","\n","    spec_norm_A_total_ols = calc_spectral_norm(A_total_ols - A)\n","    spec_norm_B_total_ols = calc_spectral_norm(B_total_ols - B)\n","\n","    # sarah dean framework\n","    print('Sarah Dean...')   \n","    sarah_A_, sarah_B_, sarah_ols_A, sarah_ols_B = calc_sarah_dean(num_)\n","    sarah_spec_A = calc_spectral_norm(sarah_A_ - A)\n","    sarah_spec_B = calc_spectral_norm(sarah_B_ - B)\n","\n","    sarah_spec_A_ols = calc_spectral_norm(sarah_ols_A - A)\n","    sarah_spec_B_ols = calc_spectral_norm(sarah_ols_B - B)\n","\n","    store[TABLE_NAME].update_row({ \n","          'R': R, \n","          'num_traj': num_,\n","          'spec_norm_A_HAT': spec_norm_A_HAT,\n","          'spec_norm_B_HAT': spec_norm_B_HAT,\n","          'spec_norm_A_ols': spec_norm_A_ols, \n","          'spec_norm_A_': spec_norm_A_,\n","          'spec_norm_B_ols': spec_norm_B_ols, \n","          'spec_norm_B_': spec_norm_B_,\n","          'spec_norm_A_total_ols': spec_norm_A_total_ols,\n","          'spec_norm_B_total_ols': spec_norm_B_total_ols,\n","          'sarah_spec_A': sarah_spec_A, \n","          'sarah_spec_B': sarah_spec_B,\n","          'sarah_spec_ols_A': sarah_spec_A_ols, \n","          'sarah_spec_ols_B': sarah_spec_B_ols,\n","          'epoch' : epoch\n","    })\n","\n","    store[TABLE_NAME].flush_row()\n","    IPython.display.clear_output()\n","store.close()\n","print('EXP ID: {}'.format(store.exp_id))"]},{"cell_type":"code","source":["!rm -r /content/drive/MyDrive/Results/traj/traj_/16abe606-cf48-411f-8de7-b49b5387f43d/"],"metadata":{"id":"EImitB-logiZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["reader = CollectionReader(OUT_DIR + EXP)\n","logs = reader.df(TABLE_NAME).reset_index()\n","reader.close()\n","logs.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":548},"id":"YXJBtV998NkN","executionInfo":{"status":"ok","timestamp":1666290201041,"user_tz":420,"elapsed":852,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"}},"outputId":"b7c6212a-046f-49bb-9d63-f30f0c3e5e23"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 1/1 [00:00<00:00,  3.64it/s]\n"]},{"output_type":"execute_result","data":{"text/plain":["   index    R  spec_norm_A_HAT  spec_norm_B_HAT  spec_norm_A_ols  \\\n","0      0  6.0         0.408761         0.617276         0.289268   \n","1      1  6.0         0.628447         0.669558         0.171144   \n","2      2  6.0         0.417528         0.655744         0.174280   \n","3      3  6.0         0.458889         0.722813         0.139225   \n","4      4  6.0         0.493747         0.787843         0.146857   \n","\n","   spec_norm_A_  spec_norm_B_ols  spec_norm_B_  sarah_spec_A  sarah_spec_B  \\\n","0      0.222187         0.435846      0.277416      1.050665      0.692706   \n","1      0.158802         0.320202      0.308485      0.800069      0.774837   \n","2      0.094616         0.316999      0.179011      0.541776      0.488296   \n","3      0.103981         0.272795      0.187965      0.417084      0.404917   \n","4      0.098723         0.221953      0.165573      0.423625      0.403387   \n","\n","   sarah_spec_ols_A  sarah_spec_ols_B  spec_norm_A_total_ols  \\\n","0          0.900405          0.747867               0.237702   \n","1          0.587771          0.469294               0.146996   \n","2          0.487955          0.541756               0.156546   \n","3          0.434706          0.499301               0.146655   \n","4          0.348549          0.415645               0.131627   \n","\n","   spec_norm_B_total_ols  num_traj  epoch  \\\n","0               0.519869       200      1   \n","1               0.298784       300      1   \n","2               0.284968       400      1   \n","3               0.197419       500      1   \n","4               0.198773       600      2   \n","\n","                                 exp_id  \n","0  1435a4c7-f7a8-4df9-9975-a4fea91387ce  \n","1  1435a4c7-f7a8-4df9-9975-a4fea91387ce  \n","2  1435a4c7-f7a8-4df9-9975-a4fea91387ce  \n","3  1435a4c7-f7a8-4df9-9975-a4fea91387ce  \n","4  1435a4c7-f7a8-4df9-9975-a4fea91387ce  "],"text/html":["\n","  <div id=\"df-7e3ab946-b90f-493d-abce-2263c05488ae\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>R</th>\n","      <th>spec_norm_A_HAT</th>\n","      <th>spec_norm_B_HAT</th>\n","      <th>spec_norm_A_ols</th>\n","      <th>spec_norm_A_</th>\n","      <th>spec_norm_B_ols</th>\n","      <th>spec_norm_B_</th>\n","      <th>sarah_spec_A</th>\n","      <th>sarah_spec_B</th>\n","      <th>sarah_spec_ols_A</th>\n","      <th>sarah_spec_ols_B</th>\n","      <th>spec_norm_A_total_ols</th>\n","      <th>spec_norm_B_total_ols</th>\n","      <th>num_traj</th>\n","      <th>epoch</th>\n","      <th>exp_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>6.0</td>\n","      <td>0.408761</td>\n","      <td>0.617276</td>\n","      <td>0.289268</td>\n","      <td>0.222187</td>\n","      <td>0.435846</td>\n","      <td>0.277416</td>\n","      <td>1.050665</td>\n","      <td>0.692706</td>\n","      <td>0.900405</td>\n","      <td>0.747867</td>\n","      <td>0.237702</td>\n","      <td>0.519869</td>\n","      <td>200</td>\n","      <td>1</td>\n","      <td>1435a4c7-f7a8-4df9-9975-a4fea91387ce</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>6.0</td>\n","      <td>0.628447</td>\n","      <td>0.669558</td>\n","      <td>0.171144</td>\n","      <td>0.158802</td>\n","      <td>0.320202</td>\n","      <td>0.308485</td>\n","      <td>0.800069</td>\n","      <td>0.774837</td>\n","      <td>0.587771</td>\n","      <td>0.469294</td>\n","      <td>0.146996</td>\n","      <td>0.298784</td>\n","      <td>300</td>\n","      <td>1</td>\n","      <td>1435a4c7-f7a8-4df9-9975-a4fea91387ce</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>6.0</td>\n","      <td>0.417528</td>\n","      <td>0.655744</td>\n","      <td>0.174280</td>\n","      <td>0.094616</td>\n","      <td>0.316999</td>\n","      <td>0.179011</td>\n","      <td>0.541776</td>\n","      <td>0.488296</td>\n","      <td>0.487955</td>\n","      <td>0.541756</td>\n","      <td>0.156546</td>\n","      <td>0.284968</td>\n","      <td>400</td>\n","      <td>1</td>\n","      <td>1435a4c7-f7a8-4df9-9975-a4fea91387ce</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>6.0</td>\n","      <td>0.458889</td>\n","      <td>0.722813</td>\n","      <td>0.139225</td>\n","      <td>0.103981</td>\n","      <td>0.272795</td>\n","      <td>0.187965</td>\n","      <td>0.417084</td>\n","      <td>0.404917</td>\n","      <td>0.434706</td>\n","      <td>0.499301</td>\n","      <td>0.146655</td>\n","      <td>0.197419</td>\n","      <td>500</td>\n","      <td>1</td>\n","      <td>1435a4c7-f7a8-4df9-9975-a4fea91387ce</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>6.0</td>\n","      <td>0.493747</td>\n","      <td>0.787843</td>\n","      <td>0.146857</td>\n","      <td>0.098723</td>\n","      <td>0.221953</td>\n","      <td>0.165573</td>\n","      <td>0.423625</td>\n","      <td>0.403387</td>\n","      <td>0.348549</td>\n","      <td>0.415645</td>\n","      <td>0.131627</td>\n","      <td>0.198773</td>\n","      <td>600</td>\n","      <td>2</td>\n","      <td>1435a4c7-f7a8-4df9-9975-a4fea91387ce</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e3ab946-b90f-493d-abce-2263c05488ae')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7e3ab946-b90f-493d-abce-2263c05488ae button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7e3ab946-b90f-493d-abce-2263c05488ae');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":112}]},{"cell_type":"code","source":["mean = logs.groupby('num_traj').mean()\n","\n","R_std_dev = np.sqrt(logs.groupby('num_traj').var())\n","lower, upper = mean - 2*R_std_dev, mean + 2*R_std_dev"],"metadata":{"id":"l5HxPTYS8PB1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["colors = ['blue', 'red']\n","\n","spec_A = ['spec_norm_A_', 'sarah_spec_A']\n","\n","scatter = []\n","for i in enumerate(mean[spec_A].columns): \n","  scatter = scatter + measurement_scatter(mean[i[1]], upper[i[1]], lower[i[1]], i[1], color=colors[i[0]])\n","\n","\n","fig = go.Figure(scatter)\n","\n","fig.update_layout(\n","    yaxis_title='Spectral Norm Error',\n","    xaxis_title='Max T',\n","    hovermode=\"x\", \n","    plot_bgcolor='rgba(0, 0, 0, 0)',\n","    paper_bgcolor='rgba(0, 0, 0, 0)',\n",")\n","\n","fig.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"3vJpnfW98Q_A","executionInfo":{"status":"ok","timestamp":1666290218423,"user_tz":420,"elapsed":415,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"}},"outputId":"a69a6cfe-4ccf-4d65-bb64-3c6f57adbecf"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"34b79dd4-fb36-420c-8d3d-5634d6ac5652\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"34b79dd4-fb36-420c-8d3d-5634d6ac5652\")) {                    Plotly.newPlot(                        \"34b79dd4-fb36-420c-8d3d-5634d6ac5652\",                        [{\"line\":{\"color\":\"blue\"},\"mode\":\"lines+markers\",\"name\":\"Mean \\nspec_norm_A_\",\"x\":[200,300,400,500,600,700,800,900,1000,1100],\"y\":[0.20954587757587434,0.17167198210954665,0.11124897599220276,0.10055783241987229,0.09510881006717682,0.10083301067352295,0.08020532727241517,0.06693592965602875,0.07913410142064095,0.05907362997531891],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(0, 0, 255, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Upper Bound \\nspec_norm_A_\",\"showlegend\":false,\"x\":[200,300,400,500,600,700,800,900,1000,1100],\"y\":[0.2608609841266285,0.24767953600701217,0.14212807344458517,0.12275981978097125,0.1569422503332809,0.1875426325948409,0.10766850588412513,0.09711161692399947,0.1031016363425291,0.07223512128971442],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(0, 0, 255, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Lower Bound \\nspec_norm_A_\",\"showlegend\":false,\"x\":[200,300,400,500,600,700,800,900,1000,1100],\"y\":[0.15823077102512018,0.09566442821208113,0.08036987853982037,0.07835584505877333,0.03327536980107275,0.01412338875220498,0.0527421486607052,0.03676024238805803,0.0551665664987528,0.0459121386609234],\"type\":\"scatter\"},{\"line\":{\"color\":\"red\"},\"mode\":\"lines+markers\",\"name\":\"Mean \\nsarah_spec_A\",\"x\":[200,300,400,500,600,700,800,900,1000,1100],\"y\":[1.0246996521949767,0.8210938096046447,0.6006235659122467,0.565474408864975,0.47961321473121643,0.41812085509300234,0.4588269591331482,0.3177738726139069,0.3968130677938461,0.30669260025024414],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(255, 0, 0, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Upper Bound \\nsarah_spec_A\",\"showlegend\":false,\"x\":[200,300,400,500,600,700,800,900,1000,1100],\"y\":[1.2676156792025188,1.1270757577922028,0.8201651284772015,0.940129759114761,0.6050806197827758,0.5909155787778013,0.6109115870383328,0.3811239561702431,0.766697370696559,0.4736725816849878],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(255, 0, 0, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Lower Bound \\nsarah_spec_A\",\"showlegend\":false,\"x\":[200,300,400,500,600,700,800,900,1000,1100],\"y\":[0.7817836251874345,0.5151118614170866,0.38108200334729203,0.190819058615189,0.35414580967965703,0.24532613140820334,0.30674233122796357,0.2544237890575707,0.026928764891133328,0.13971261881550043],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"yaxis\":{\"title\":{\"text\":\"Spectral Norm Error\"}},\"xaxis\":{\"title\":{\"text\":\"Max T\"}},\"hovermode\":\"x\",\"plot_bgcolor\":\"rgba(0, 0, 0, 0)\",\"paper_bgcolor\":\"rgba(0, 0, 0, 0)\"},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('34b79dd4-fb36-420c-8d3d-5634d6ac5652');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"code","source":["colors = ['blue', 'red']\n","\n","spec_B = ['spec_norm_B_', 'sarah_spec_B']\n","\n","scatter = []\n","for i in enumerate(mean[spec_B].columns): \n","  scatter = scatter + measurement_scatter(mean[spec_B[i[0]]], \n","                                          upper[spec_B[i[0]]], \n","                                          lower[spec_B[i[0]]], i[1], color=colors[i[0]])\n","\n","fig = go.Figure(scatter)\n","\n","fig.update_layout(\n","    yaxis_title='Spectral Norm Error',\n","    xaxis_title='Max T',\n","    hovermode=\"x\",\n","    plot_bgcolor='rgba(0, 0, 0, 0)',\n","    paper_bgcolor='rgba(0, 0, 0, 0)',\n",")\n","fig.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"D9TUcd_O8TqH","executionInfo":{"status":"ok","timestamp":1666290224944,"user_tz":420,"elapsed":178,"user":{"displayName":"Pat Stefanou","userId":"03550109589279644114"}},"outputId":"c76aa09d-8410-441e-a97b-492e2b4b55db"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"c27d6055-eee1-4e14-8e09-0986b497dda5\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"c27d6055-eee1-4e14-8e09-0986b497dda5\")) {                    Plotly.newPlot(                        \"c27d6055-eee1-4e14-8e09-0986b497dda5\",                        [{\"line\":{\"color\":\"blue\"},\"mode\":\"lines+markers\",\"name\":\"Mean \\nspec_norm_B_\",\"x\":[200,300,400,500,600,700,800,900,1000,1100],\"y\":[0.3784427046775818,0.2858228385448456,0.22083255648612976,0.1874529868364334,0.16575953364372253,0.15129601806402207,0.14042483419179916,0.12758465707302094,0.14754127115011215,0.11766614466905594],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(0, 0, 255, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Upper Bound \\nspec_norm_B_\",\"showlegend\":false,\"x\":[200,300,400,500,600,700,800,900,1000,1100],\"y\":[0.5425095568244087,0.33310714092447613,0.3188117075769281,0.2389691158970803,0.22544222550857185,0.1910309108710351,0.17520953754985602,0.17086324473118142,0.2289223170272541,0.1440244651815111],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(0, 0, 255, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Lower Bound \\nspec_norm_B_\",\"showlegend\":false,\"x\":[200,300,400,500,600,700,800,900,1000,1100],\"y\":[0.21437585253075483,0.23853853616521503,0.12285340539533142,0.1359368577757865,0.10607684177887321,0.11156112525700904,0.1056401308337423,0.08430606941486045,0.06616022527297019,0.09130782415660077],\"type\":\"scatter\"},{\"line\":{\"color\":\"red\"},\"mode\":\"lines+markers\",\"name\":\"Mean \\nsarah_spec_B\",\"x\":[200,300,400,500,600,700,800,900,1000,1100],\"y\":[0.6671413302421569,0.7215328812599182,0.4785706102848053,0.4303848624229431,0.39026710391044617,0.3191497325897217,0.40491544604301455,0.2796762704849243,0.35397692024707794,0.2743618130683899],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(255, 0, 0, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Upper Bound \\nsarah_spec_B\",\"showlegend\":false,\"x\":[200,300,400,500,600,700,800,900,1000,1100],\"y\":[0.7472748351489406,0.8270908568061974,0.6037233613919754,0.573098688020974,0.5065788056517608,0.39899870700394535,0.5240564056302095,0.2978314308635238,0.8047432374183128,0.2989429837371825],\"type\":\"scatter\"},{\"fill\":\"tonexty\",\"fillcolor\":\"rgba(255, 0, 0, .2)\",\"line\":{\"width\":0},\"marker\":{\"color\":\"#444\"},\"mode\":\"lines\",\"name\":\"Lower Bound \\nsarah_spec_B\",\"showlegend\":false,\"x\":[200,300,400,500,600,700,800,900,1000,1100],\"y\":[0.5870078253353733,0.615974905713639,0.35341785917763524,0.28767103682491224,0.27395540216913156,0.239300758175498,0.28577448645581965,0.26152111010632484,-0.09678939692415695,0.24978064239959735],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"yaxis\":{\"title\":{\"text\":\"Spectral Norm Error\"}},\"xaxis\":{\"title\":{\"text\":\"Max T\"}},\"hovermode\":\"x\",\"plot_bgcolor\":\"rgba(0, 0, 0, 0)\",\"paper_bgcolor\":\"rgba(0, 0, 0, 0)\"},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('c27d6055-eee1-4e14-8e09-0986b497dda5');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dnWXyQkncOwn"},"outputs":[],"source":[]}],"metadata":{"colab":{"collapsed_sections":[],"provenance":[{"file_id":"12Zsei5FwnXt91BBi2qXAHWj98aSQzEN8","timestamp":1651799026480}],"toc_visible":true},"kernelspec":{"display_name":"Python 2","language":"python","name":"python2"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"},"latex_envs":{"LaTeX_envs_menu_present":true,"autoclose":false,"autocomplete":true,"bibliofile":"biblio.bib","cite_by":"apalike","current_citInitial":1,"eqLabelWithNumbers":true,"eqNumInitial":1,"hotkeys":{"equation":"Ctrl-E","itemize":"Ctrl-I"},"labels_anchors":false,"latex_user_defs":false,"report_style_numbering":false,"user_envs_cfg":false},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"nbformat":4,"nbformat_minor":0}